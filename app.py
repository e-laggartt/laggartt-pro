# app.py
import streamlit as st
import pandas as pd
from utils.data_loader import load_radiator_matrix
from utils.calculator import calculate_brackets, parse_quantity

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="RadiaTool Pro v2.0",
    page_icon="üîß",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –ó–∞–≥—Ä—É–∑–∫–∞ CSS
def load_css():
    with open("assets/style.css") as f:
        st.markdown(f"<style>{f.read()}</style>", unsafe_allow_html=True)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏
def initialize_session_state():
    if 'entry_values' not in st.session_state:
        st.session_state.entry_values = {}
    if 'connection' not in st.session_state:
        st.session_state.connection = "VK-–ø—Ä–∞–≤–æ–µ"
    if 'radiator_type' not in st.session_state:
        st.session_state.radiator_type = "10"
    if 'bracket_type' not in st.session_state:
        st.session_state.bracket_type = "–ù–∞—Å—Ç–µ–Ω–Ω—ã–µ"
    if 'discounts' not in st.session_state:
        st.session_state.discounts = {"radiators": 0, "brackets": 0}
    if 'spec_data' not in st.session_state:
        st.session_state.spec_data = pd.DataFrame()

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    load_css()
    initialize_session_state()
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    st.title("üîß RadiaTool Pro v2.0")
    st.markdown("---")
    
    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å
    with st.sidebar:
        st.image("assets/images/logo.png", width=200)  # –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –ª–æ–≥–æ
        st.header("üîß –ü–ê–†–ê–ú–ï–¢–†–´ –ü–û–î–ë–û–†–ê")
        
        # –í—ã–±–æ—Ä –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        connection = st.radio(
            "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ:",
            ["VK-–ø—Ä–∞–≤–æ–µ", "VK-–ª–µ–≤–æ–µ", "K-–±–æ–∫–æ–≤–æ–µ"],
            index=0
        )
        st.session_state.connection = connection
        
        # –í—ã–±–æ—Ä —Ç–∏–ø–∞ —Ä–∞–¥–∏–∞—Ç–æ—Ä–∞
        if connection.startswith("VK"):
            rad_types = ["10", "11", "30", "33"]
        else:
            rad_types = ["10", "11", "20", "21", "22", "30", "33"]
            
        radiator_type = st.selectbox("–¢–∏–ø —Ä–∞–¥–∏–∞—Ç–æ—Ä–∞:", rad_types)
        st.session_state.radiator_type = radiator_type
        
        # –í—ã–±–æ—Ä –∫—Ä–µ–ø–ª–µ–Ω–∏—è
        bracket_type = st.radio(
            "–ö—Ä–µ–ø–ª–µ–Ω–∏–µ:",
            ["–ù–∞—Å—Ç–µ–Ω–Ω—ã–µ", "–ù–∞–ø–æ–ª—å–Ω—ã–µ", "–ë–µ–∑"]
        )
        st.session_state.bracket_type = bracket_type
        
        # –°–∫–∏–¥–∫–∏
        st.subheader("–°–∫–∏–¥–∫–∏:")
        rad_discount = st.number_input("–†–∞–¥–∏–∞—Ç–æ—Ä—ã (%):", 0, 100, 0)
        br_discount = st.number_input("–ö—Ä–æ–Ω—à—Ç–µ–π–Ω—ã (%):", 0, 100, 0)
        st.session_state.discounts = {
            "radiators": rad_discount,
            "brackets": br_discount
        }
        
        st.markdown("---")
        st.header("üìÅ –ò–ù–°–¢–†–£–ú–ï–ù–¢–´")
        
        if st.button("üì§ –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö"):
            st.switch_page("pages/03_üìä_–ò–º–ø–æ—Ä—Ç_–¥–∞–Ω–Ω—ã—Ö.py")
            
        if st.button("üì• –≠–∫—Å–ø–æ—Ä—Ç —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏"):
            st.switch_page("pages/02_üìã_–°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è.py")
            
        if st.button("üìã –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä"):
            st.switch_page("pages/02_üìã_–°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è.py")
            
        if st.button("üóëÔ∏è –°–±—Ä–æ—Å", type="secondary"):
            for key in list(st.session_state.keys()):
                del st.session_state[key]
            st.rerun()
        
        st.markdown("---")
        st.header("‚ÑπÔ∏è –ò–ù–§–û–†–ú–ê–¶–ò–Ø")
        
        if st.button("üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è"):
            st.switch_page("pages/04_‚ÑπÔ∏è_–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è.py")
            
        if st.button("üí∞ –ü—Ä–∞–π—Å-–ª–∏—Å—Ç"):
            st.info("–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
            
        if st.button("üìÑ –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã"):
            st.info("–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")
            
        if st.button("üõ†Ô∏è –ü–æ–¥–¥–µ—Ä–∂–∫–∞"):
            st.info("mt@laggartt.ru")

    # –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å - –º–∞—Ç—Ä–∏—Ü–∞ —Ä–∞–¥–∏–∞—Ç–æ—Ä–æ–≤
    st.header(f"–ú–∞—Ç—Ä–∏—Ü–∞ —Ä–∞–¥–∏–∞—Ç–æ—Ä–æ–≤: {connection} {radiator_type}")
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –º–∞—Ç—Ä–∏—Ü—ã
    matrix_data = load_radiator_matrix(connection, radiator_type)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Ç—Ä–∏—Ü—ã –≤–≤–æ–¥–∞
    heights = [300, 400, 500, 600, 900]
    lengths = [400, 500, 600, 700, 800, 900, 1000, 1100, 1200, 1300, 1400, 1500, 1600, 1700, 1800, 1900, 2000]
    
    # –°–µ—Ç–∫–∞ –¥–ª—è –º–∞—Ç—Ä–∏—Ü—ã
    cols = st.columns(len(lengths) + 1)
    
    # –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Å—Ç–æ–ª–±—Ü–æ–≤ (–¥–ª–∏–Ω—ã)
    with cols[0]:
        st.write("**–í—ã—Å–æ—Ç–∞** ‚Üí **–î–ª–∏–Ω–∞**")
    for i, length in enumerate(lengths):
        with cols[i + 1]:
            st.write(f"**{length}**")
    
    # –°—Ç—Ä–æ–∫–∏ –º–∞—Ç—Ä–∏—Ü—ã
    for height in heights:
        cols = st.columns(len(lengths) + 1)
        
        with cols[0]:
            st.write(f"**{height}**")
            
        for i, length in enumerate(lengths):
            with cols[i + 1]:
                key = f"{height}_{length}"
                value = st.session_state.entry_values.get(key, "")
                
                # –ü–æ–ª–µ –≤–≤–æ–¥–∞ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
                new_value = st.text_input(
                    "",
                    value=value,
                    key=key,
                    label_visibility="collapsed",
                    placeholder="0"
                )
                
                # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤–≤–æ–¥–∞
                if new_value:
                    if all(c in '0123456789+' for c in new_value):
                        st.session_state.entry_values[key] = new_value
                    else:
                        st.error("–¢–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –∏ +")
                        st.session_state.entry_values[key] = ""

if __name__ == "__main__":
    main()