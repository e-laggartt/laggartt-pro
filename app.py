# app.py
import streamlit as st
import pandas as pd

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="RadiaTool Pro v2.0",
    page_icon="üîß",
    layout="wide",
    initial_sidebar_state="expanded"
)

def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è session_state
    if 'entry_values' not in st.session_state:
        st.session_state.entry_values = {}
    if 'connection' not in st.session_state:
        st.session_state.connection = "VK-–ø—Ä–∞–≤–æ–µ"
    if 'radiator_type' not in st.session_state:
        st.session_state.radiator_type = "10"
    if 'bracket_type' not in st.session_state:
        st.session_state.bracket_type = "–ù–∞—Å—Ç–µ–Ω–Ω—ã–µ –∫—Ä–æ–Ω—à—Ç–µ–π–Ω—ã"
    if 'discounts' not in st.session_state:
        st.session_state.discounts = {"radiators": 0, "brackets": 0}
    if 'spec_data' not in st.session_state:
        st.session_state.spec_data = pd.DataFrame()
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    st.title("üîß RadiaTool Pro v2.0")
    st.markdown("---")
    
    # –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
    st.header("üöÄ –ù–∞–≤–∏–≥–∞—Ü–∏—è")
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        if st.button("üè† –ú–∞—Ç—Ä–∏—Ü–∞ —Ä–∞–¥–∏–∞—Ç–æ—Ä–æ–≤", use_container_width=True):
            st.switch_page("pages/–ì–ª–∞–≤–Ω–∞—è.py")
    
    with col2:
        if st.button("üìã –°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è", use_container_width=True):
            st.switch_page("pages/02_üìã_–°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è.py")
    
    with col3:
        if st.button("üìä –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö", use_container_width=True):
            st.switch_page("pages/03_üìä_–ò–º–ø–æ—Ä—Ç_–¥–∞–Ω–Ω—ã—Ö.py")
    
    with col4:
        if st.button("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", use_container_width=True):
            st.switch_page("pages/04_‚ÑπÔ∏è_–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è.py")
    
    # –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç
    st.markdown("---")
    st.header("üéØ –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç")
    
    st.markdown("""
    1. **–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ \"üè† –ú–∞—Ç—Ä–∏—Ü–∞ —Ä–∞–¥–∏–∞—Ç–æ—Ä–æ–≤\"** –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
    2. **–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã** –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
    3. **–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –º–∞—Ç—Ä–∏—Ü—É** - –≤–≤–æ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤ —è—á–µ–π–∫–∏
    4. **–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ \"üìã –°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è\"** –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏ —ç–∫—Å–ø–æ—Ä—Ç–∞
    """)
    
    # –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
    st.markdown("---")
    st.header("üìä –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        entry_count = len(st.session_state.entry_values)
        filled_count = len([v for v in st.session_state.entry_values.values() if v])
        st.metric("–ó–∞–ø–æ–ª–Ω–µ–Ω–æ —è—á–µ–µ–∫", f"{filled_count}/{entry_count}")
    
    with col2:
        spec_count = len(st.session_state.spec_data)
        st.metric("–ü–æ–∑–∏—Ü–∏–π –≤ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏", spec_count)
    
    with col3:
        st.metric("–í–µ—Ä—Å–∏—è", "2.0")

if __name__ == "__main__":
    main()