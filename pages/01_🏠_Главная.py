# pages/01_üè†_–ì–ª–∞–≤–Ω–∞—è.py
import streamlit as st
from pathlib import Path
import pandas as pd

# === –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö ===
@st.cache_data
def load_data():
    matrix_path = Path("data/–ú–∞—Ç—Ä–∏—Ü–∞.xlsx")
    brackets_path = Path("data/–ö—Ä–æ–Ω—à—Ç–µ–π–Ω—ã.xlsx")
    if not matrix_path.exists():
        st.error("‚ùå –§–∞–π–ª '–ú–∞—Ç—Ä–∏—Ü–∞.xlsx' –Ω–µ –Ω–∞–π–¥–µ–Ω")
        st.stop()
    if not brackets_path.exists():
        st.error("‚ùå –§–∞–π–ª '–ö—Ä–æ–Ω—à—Ç–µ–π–Ω—ã.xlsx' –Ω–µ –Ω–∞–π–¥–µ–Ω")
        st.stop()
    sheets = pd.read_excel(matrix_path, sheet_name=None, engine="openpyxl")
    brackets_df = pd.read_excel(brackets_path, engine="openpyxl")
    brackets_df['–ê—Ä—Ç–∏–∫—É–ª'] = brackets_df['–ê—Ä—Ç–∏–∫—É–ª'].astype(str).str.strip()
    for name, df in sheets.items():
        if name != "–ö—Ä–æ–Ω—à—Ç–µ–π–Ω—ã":
            df['–ê—Ä—Ç–∏–∫—É–ª'] = df['–ê—Ä—Ç–∏–∫—É–ª'].astype(str).str.strip()
            df['–í–µ—Å, –∫–≥'] = pd.to_numeric(df['–í–µ—Å, –∫–≥'], errors='coerce').fillna(0)
            df['–û–±—ä–µ–º, –º3'] = pd.to_numeric(df['–û–±—ä–µ–º, –º3'], errors='coerce').fillna(0)
    return sheets, brackets_df

sheets, brackets_df = load_data()

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è ===
if "connection" not in st.session_state:
    st.session_state.connection = "VK-–ø—Ä–∞–≤–æ–µ"
if "radiator_type" not in st.session_state:
    st.session_state.radiator_type = "10"
if "bracket_type" not in st.session_state:
    st.session_state.bracket_type = "–ù–∞—Å—Ç–µ–Ω–Ω—ã–µ –∫—Ä–æ–Ω—à—Ç–µ–π–Ω—ã"
if "radiator_discount" not in st.session_state:
    st.session_state.radiator_discount = 0.0
if "bracket_discount" not in st.session_state:
    st.session_state.bracket_discount = 0.0
if "entry_values" not in st.session_state:
    st.session_state.entry_values = {}
if "show_tooltips" not in st.session_state:
    st.session_state.show_tooltips = False

# === –í–∞–ª–∏–¥–∞—Ü–∏—è –≤–≤–æ–¥–∞ ===
def validate_input(val):
    if not val:
        return True
    return all(c.isdigit() or c == '+' for c in val)

# === –ü–∞—Ä—Å–∏–Ω–≥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ ===
def parse_quantity(val):
    if not val:
        return 0
    try:
        if isinstance(val, (int, float)):
            return int(round(float(val)))
        val = str(val).strip().strip('+')
        if not val:
            return 0
        return sum(int(round(float(part))) for part in val.split('+') if part.strip())
    except:
        return 0

# === –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ ===
st.markdown("### üîß –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–±–æ—Ä–∞")

col1, col2 = st.columns(2)
with col1:
    connection = st.radio(
        "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ",
        ["VK-–ø—Ä–∞–≤–æ–µ", "VK-–ª–µ–≤–æ–µ", "K-–±–æ–∫–æ–≤–æ–µ"],
        index=["VK-–ø—Ä–∞–≤–æ–µ", "VK-–ª–µ–≤–æ–µ", "K-–±–æ–∫–æ–≤–æ–µ"].index(st.session_state.connection),
        horizontal=True
    )
    st.session_state.connection = connection

    types = ["10", "11", "30", "33"] if connection == "VK-–ª–µ–≤–æ–µ" else ["10", "11", "20", "21", "22", "30", "33"]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ radiator_type –¥–æ—Å—Ç—É–ø–Ω–æ –≤ —Å–ø–∏—Å–∫–µ types
    if st.session_state.radiator_type not in types:
        # –ï—Å–ª–∏ –Ω–µ—Ç, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–∞ –ø–µ—Ä–≤–æ–µ –¥–æ—Å—Ç—É–ø–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        st.session_state.radiator_type = types[0]
    
    rad_type = st.radio(
        "–¢–∏–ø —Ä–∞–¥–∏–∞—Ç–æ—Ä–∞",
        types,
        index=types.index(st.session_state.radiator_type),
        horizontal=True
    )
    st.session_state.radiator_type = rad_type

# === –ú–∞—Ç—Ä–∏—Ü–∞ ===
st.markdown("### üìä –ú–∞—Ç—Ä–∏—Ü–∞ —Ä–∞–¥–∏–∞—Ç–æ—Ä–æ–≤")
sheet_name = f"{st.session_state.connection} {st.session_state.radiator_type}"

# –ü—Ä–∏–º–µ–Ω—è–µ–º CSS –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–π –º–µ–∂–¥—É —è—á–µ–π–∫–∞–º–∏
st.markdown("""
<style>
    .compact-table {
        margin: 0;
        padding: 0;
    }
    .compact-table .stTextInput input {
        margin: 1px;
        padding: 2px 4px;
        height: 30px;
    }
    .compact-col {
        padding: 1px !important;
        margin: 0 !important;
    }
</style>
""", unsafe_allow_html=True)

if sheet_name not in sheets:
    st.error(f"–õ–∏—Å—Ç '{sheet_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
else:
    df = sheets[sheet_name]
    lengths = list(range(400, 2100, 100))
    heights = [300, 400, 500, 600, 900]

    # –ó–∞–≥–æ–ª–æ–≤–∫–∏
    cols = st.columns(len(heights) + 1)
    with cols[0]:
        st.markdown("**–¥–ª–∏–Ω–∞\\–≤—ã—Å–æ—Ç–∞**", help="–î–ª–∏–Ω–∞ —Ä–∞–¥–∏–∞—Ç–æ—Ä–∞ –≤ –º–º")
    for j, h in enumerate(heights):
        with cols[j+1]:
            st.markdown(f"**{h}**", help=f"–í—ã—Å–æ—Ç–∞ —Ä–∞–¥–∏–∞—Ç–æ—Ä–∞ {h} –º–º")

    has_any = any(st.session_state.entry_values.values())
    for i, l in enumerate(lengths):
        cols = st.columns(len(heights) + 1)
        with cols[0]:
            st.markdown(f"**{l}**", help=f"–î–ª–∏–Ω–∞ —Ä–∞–¥–∏–∞—Ç–æ—Ä–∞ {l} –º–º")
        for j, h in enumerate(heights):
            pattern = f"/{h}/{l}"
            match = df[df['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ'].str.contains(pattern, na=False)]
            if not match.empty:
                art = str(match.iloc[0]['–ê—Ä—Ç–∏–∫—É–ª'])
                key = (sheet_name, art)
                current = st.session_state.entry_values.get(key, "")
                with cols[j+1]:
                    # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –¥–ª—è –∫–æ–º–ø–∞–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    new_val = st.text_input(
                        "",
                        value=current,
                        key=f"cell_{sheet_name}_{art}",
                        label_visibility="collapsed"
                    )
                    if validate_input(new_val):
                        st.session_state.entry_values[key] = new_val
                    else:
                        st.session_state.entry_values[key] = ""

# === –ö—Ä–µ–ø–ª–µ–Ω–∏—è –∏ —Å–∫–∏–¥–∫–∏ (–ø–µ—Ä–µ–Ω–µ—Å–µ–Ω—ã –ø–æ–¥ –º–∞—Ç—Ä–∏—Ü—É) ===
st.markdown("---")
st.markdown("### üî© –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã")

col1, col2 = st.columns(2)
with col1:
    bracket = st.radio(
        "–ö—Ä–µ–ø–ª–µ–Ω–∏–µ",
        ["–ù–∞—Å—Ç–µ–Ω–Ω—ã–µ –∫—Ä–æ–Ω—à—Ç–µ–π–Ω—ã", "–ù–∞–ø–æ–ª—å–Ω—ã–µ –∫—Ä–æ–Ω—à—Ç–µ–π–Ω—ã", "–ë–µ–∑ –∫—Ä–æ–Ω—à—Ç–µ–π–Ω–æ–≤"],
        index=["–ù–∞—Å—Ç–µ–Ω–Ω—ã–µ –∫—Ä–æ–Ω—à—Ç–µ–π–Ω—ã", "–ù–∞–ø–æ–ª—å–Ω—ã–µ –∫—Ä–æ–Ω—à—Ç–µ–π–Ω—ã", "–ë–µ–∑ –∫—Ä–æ–Ω—à—Ç–µ–π–Ω–æ–≤"].index(st.session_state.bracket_type)
    )
    st.session_state.bracket_type = bracket

with col2:
    rad_disc = st.number_input(
        "–°–∫–∏–¥–∫–∞ –Ω–∞ —Ä–∞–¥–∏–∞—Ç–æ—Ä—ã, %",
        0.0, 100.0, st.session_state.radiator_discount, 1.0,
        help="–í–≤–µ–¥–∏—Ç–µ —Å–∫–∏–¥–∫—É –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö –¥–ª—è –≤—Å–µ—Ö —Ä–∞–¥–∏–∞—Ç–æ—Ä–æ–≤"
    )
    br_disc = st.number_input(
        "–°–∫–∏–¥–∫–∞ –Ω–∞ –∫—Ä–æ–Ω—à—Ç–µ–π–Ω—ã, %",
        0.0, 100.0, st.session_state.bracket_discount, 1.0,
        help="–í–≤–µ–¥–∏—Ç–µ —Å–∫–∏–¥–∫—É –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö –¥–ª—è –∫—Ä–æ–Ω—à—Ç–µ–π–Ω–æ–≤"
    )
    st.session_state.radiator_discount = rad_disc
    st.session_state.bracket_discount = br_disc