# pages/01_üè†_–ì–ª–∞–≤–Ω–∞—è.py
import streamlit as st
from pathlib import Path
import pandas as pd
import numpy as np
import re

# === –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö ===
@st.cache_data
def load_data():
    matrix_path = Path("data/–ú–∞—Ç—Ä–∏—Ü–∞.xlsx")
    brackets_path = Path("data/–ö—Ä–æ–Ω—à—Ç–µ–π–Ω—ã.xlsx")
    if not matrix_path.exists():
        st.error("‚ùå –§–∞–π–ª '–ú–∞—Ç—Ä–∏—Ü–∞.xlsx' –Ω–µ –Ω–∞–π–¥–µ–Ω")
        st.stop()
    if not brackets_path.exists():
        st.error("‚ùå –§–∞–π–ª '–ö—Ä–æ–Ω—à—Ç–µ–π–Ω—ã.xlsx' –Ω–µ –Ω–∞–π–¥–µ–Ω")
        st.stop()
    
    sheets = pd.read_excel(matrix_path, sheet_name=None, engine="openpyxl")
    brackets_df = pd.read_excel(brackets_path, engine="openpyxl")
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫—Ä–æ–Ω—à—Ç–µ–π–Ω–æ–≤
    if "–ö—Ä–æ–Ω—à—Ç–µ–π–Ω—ã" in sheets:
        brackets_df = sheets["–ö—Ä–æ–Ω—à—Ç–µ–π–Ω—ã"].copy()
        del sheets["–ö—Ä–æ–Ω—à—Ç–µ–π–Ω—ã"]
    
    brackets_df['–ê—Ä—Ç–∏–∫—É–ª'] = brackets_df['–ê—Ä—Ç–∏–∫—É–ª'].astype(str).str.strip()
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–∏—Å—Ç–æ–≤ —Å —Ä–∞–¥–∏–∞—Ç–æ—Ä–∞–º–∏
    for name, df in sheets.items():
        df['–ê—Ä—Ç–∏–∫—É–ª'] = df['–ê—Ä—Ç–∏–∫—É–ª'].astype(str).str.strip()
        df['–í–µ—Å, –∫–≥'] = pd.to_numeric(df['–í–µ—Å, –∫–≥'], errors='coerce').fillna(0)
        df['–û–±—ä–µ–º, –º3'] = pd.to_numeric(df['–û–±—ä–µ–º, –º3'], errors='coerce').fillna(0)
        df['–ú–æ—â–Ω–æ—Å—Ç—å, –í—Ç'] = df.get('–ú–æ—â–Ω–æ—Å—Ç—å, –í—Ç', '')
    
    return sheets, brackets_df

sheets, brackets_df = load_data()

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è ===
if "connection" not in st.session_state:
    st.session_state.connection = "VK-–ø—Ä–∞–≤–æ–µ"
if "radiator_type" not in st.session_state:
    st.session_state.radiator_type = "10"
if "bracket_type" not in st.session_state:
    st.session_state.bracket_type = "–ù–∞—Å—Ç–µ–Ω–Ω—ã–µ –∫—Ä–æ–Ω—à—Ç–µ–π–Ω—ã"
if "radiator_discount" not in st.session_state:
    st.session_state.radiator_discount = 0.0
if "bracket_discount" not in st.session_state:
    st.session_state.bracket_discount = 0.0
if "entry_values" not in st.session_state:
    st.session_state.entry_values = {}
if "show_tooltips" not in st.session_state:
    st.session_state.show_tooltips = False
if "last_validation_error" not in st.session_state:
    st.session_state.last_validation_error = None
if "show_selected_items" not in st.session_state:
    st.session_state.show_selected_items = False
    

# === –§—É–Ω–∫—Ü–∏–∏ –∏–∑ tkinter –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ===
def validate_input(val):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–≤–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ —è—á–µ–π–∫–∞—Ö. –†–∞–∑—Ä–µ—à–∞–µ—Ç —Ü–∏—Ñ—Ä—ã –∏ –∑–Ω–∞–∫–∏ +"""
    if val == "":  # –†–∞–∑—Ä–µ—à–∞–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É
        return True
    # –†–∞–∑—Ä–µ—à–∞–µ–º —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –∏ –∑–Ω–∞–∫ +
    pattern = r'^[\d+]+$'
    return bool(re.match(pattern, val))

def parse_quantity(value):
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–¥–∏–∞—Ç–æ—Ä–æ–≤.
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞, —á–∏—Å–ª–∞ —Å –ø–ª–∞–≤–∞—é—â–µ–π —Ç–æ—á–∫–æ–π –∏ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ —Å –ø–ª—é—Å–∞–º–∏.
    """
    try:
        if isinstance(value, str) and value.strip() in ["–ö–æ–ª-–≤–æ", "‚Ññ"]:
            return 0
            
        if not value:
            return 0
        
        if isinstance(value, (int, float)):
            return int(round(float(value)))
    
        value = str(value).strip()
        
        # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –∑–Ω–∞–∫–∏ '+' –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ
        while value.startswith('+'):
            value = value[1:]
        while value.endswith('+'):
            value = value[:-1]
        
        if not value:
            return 0
        
        parts = value.split('+')
        total = 0
        for part in parts:
            part = part.strip()
            if part:
                total += int(round(float(part)))
                
        return total
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞: {str(e)}")
        return 0

def get_product_info(sheet_name, art):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥—É–∫—Ç–µ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É"""
    if sheet_name in sheets:
        data = sheets[sheet_name]
        product = data[data['–ê—Ä—Ç–∏–∫—É–ª'] == art]
        if not product.empty:
            return product.iloc[0]
    return None

def has_any_value():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ –≤–æ –≤—Å–µ—Ö –º–∞—Ç—Ä–∏—Ü–∞—Ö"""
    return any(val and val != "0" for val in st.session_state.entry_values.values())

def get_cell_color(has_values, cell_value):
    """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ü–≤–µ—Ç —è—á–µ–π–∫–∏"""
    if cell_value and cell_value != "0":
        return "#e6f3ff"  # –ì–æ–ª—É–±–æ–π –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —è—á–µ–µ–∫
    elif has_values:
        return "#e6f3ff"  # –ì–æ–ª—É–±–æ–π –¥–ª—è –≤—Å–µ—Ö —è—á–µ–µ–∫, –µ—Å–ª–∏ –µ—Å—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ
    else:
        return "white"    # –ë–µ–ª—ã–π –µ—Å–ª–∏ –Ω–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —è—á–µ–µ–∫

def get_selected_items():
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π"""
    selected_items = []
    for key, value in st.session_state.entry_values.items():
        if value and value != "0":
            # –ö–ª—é—á –∏–º–µ–µ—Ç —Ñ–æ—Ä–º–∞—Ç: "VK-–ø—Ä–∞–≤–æ–µ_10_7724651420"
            # –ò–ª–∏: "input_0_0_VK-–ø—Ä–∞–≤–æ–µ_10_7724651420" –¥–ª—è –ø–æ–ª–µ–π –≤–≤–æ–¥–∞
            parts = key.split('_')
            
            # –ï—Å–ª–∏ –∫–ª—é—á –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å "input", –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 —á–∞—Å—Ç–∏
            if key.startswith('input_'):
                if len(parts) >= 6:
                    # –°–æ–±–∏—Ä–∞–µ–º sheet_name –∏–∑ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —á–∞—Å—Ç–µ–π
                    sheet_parts = parts[3:-1]  # –í—Å–µ —á–∞—Å—Ç–∏ –∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π (–∞—Ä—Ç–∏–∫—É–ª)
                    art = parts[-1]
                    sheet_name = ' '.join(sheet_parts)
                else:
                    continue
            else:
                # –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–ª—é—á–∞
                if len(parts) >= 3:
                    sheet_name = f"{parts[0]} {parts[1]}"
                    art = parts[2]
                else:
                    continue
            
            product = get_product_info(sheet_name, art)
            if product is not None:
                qty = parse_quantity(value)
                selected_items.append({
                    '–ê—Ä—Ç–∏–∫—É–ª': art,
                    '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ': product['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ'],
                    '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ': qty,
                    '–í–µ—Å, –∫–≥': product['–í–µ—Å, –∫–≥'],
                    '–õ–∏—Å—Ç': sheet_name
                })
    return selected_items

def get_brackets_for_radiator(radiator, bracket_type):
    """–ü–æ–¥–±–∏—Ä–∞–µ—Ç –∫—Ä–æ–Ω—à—Ç–µ–π–Ω—ã –¥–ª—è —Ä–∞–¥–∏–∞—Ç–æ—Ä–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∫—Ä–µ–ø–ª–µ–Ω–∏—è"""
    if bracket_type == "–ë–µ–∑ –∫—Ä–æ–Ω—à—Ç–µ–π–Ω–æ–≤":
        return []
    
    # –ü–æ–ª—É—á–∞–µ–º –≤–µ—Å —Ä–∞–¥–∏–∞—Ç–æ—Ä–∞
    weight = radiator['–í–µ—Å, –∫–≥']
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫—Ä–æ–Ω—à—Ç–µ–π–Ω–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞
    if bracket_type == "–ù–∞—Å—Ç–µ–Ω–Ω—ã–µ –∫—Ä–æ–Ω—à—Ç–µ–π–Ω—ã":
        search_pattern = "–Ω–∞—Å—Ç–µ–Ω"
    else:  # –ù–∞–ø–æ–ª—å–Ω—ã–µ –∫—Ä–æ–Ω—à—Ç–µ–π–Ω—ã
        search_pattern = "–Ω–∞–ø–æ–ª—å–Ω"
    
    # –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –∫—Ä–æ–Ω—à—Ç–µ–π–Ω—ã
    suitable_brackets = []
    
    for _, bracket in brackets_df.iterrows():
        bracket_name = str(bracket['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ']).lower()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç–∏–ø—É
        if search_pattern in bracket_name:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É—é –Ω–∞–≥—Ä—É–∑–∫—É –∫—Ä–æ–Ω—à—Ç–µ–π–Ω–∞
            max_load = bracket.get('–ú–∞–∫—Å_–Ω–∞–≥—Ä—É–∑–∫–∞', 0)
            try:
                max_load = float(max_load)
                if max_load >= weight:
                    suitable_brackets.append({
                        '–ê—Ä—Ç–∏–∫—É–ª': bracket['–ê—Ä—Ç–∏–∫—É–ª'],
                        '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ': bracket['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ'],
                        '–ú–∞–∫—Å_–Ω–∞–≥—Ä—É–∑–∫–∞': max_load,
                        '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ': radiator['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ']  # –°—Ç–æ–ª—å–∫–æ –∂–µ —Å–∫–æ–ª—å–∫–æ —Ä–∞–¥–∏–∞—Ç–æ—Ä–æ–≤
                    })
            except (ValueError, TypeError):
                continue
    
    return suitable_brackets

# === –ö–æ–º–ø–∞–∫—Ç–Ω—ã–π CSS —Å —É–ª—É—á—à–µ–Ω–∏—è–º–∏ ===
st.markdown("""
<style>
    .main .block-container {
        padding-top: 1rem;
        padding-bottom: 1rem;
    }
    
    .stRadio [data-testid="stMarkdownContainer"] {
        font-size: 14px;
        margin-bottom: 0;
    }
    
    .stHorizontalBlock {
        gap: 0.1rem;
    }
    
    div[data-testid="column"] {
        padding: 0px;
        margin: 0px;
    }
    
    h3 {
        margin-bottom: 0.5rem !important;
    }
    
    /* –£–ª—É—á—à–µ–Ω–Ω—ã–µ —Å—Ç–∏–ª–∏ –¥–ª—è –º–∞—Ç—Ä–∏—Ü—ã */
    .matrix-header {
        font-weight: bold;
        text-align: center;
        font-size: 12px;
        padding: 2px !important;
        background-color: #f8f9fa;
        margin: 0px;
    }
    
    .matrix-corner {
        background-color: #f0f0f0;
    }
    
    /* –°—Ç–∏–ª–∏ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –ø–æ–ª–µ–π */
    .stTextInput input {
        text-align: center !important;
        font-size: 14px !important;
        font-weight: 500 !important;
        height: 35px !important;
        padding: 0px 2px !important;
        margin: 0px !important;
    }
    
    /* –°—Ç–∏–ª—å –¥–ª—è –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–≥–æ –≤–≤–æ–¥–∞ */
    .invalid-input {
        border: 2px solid #ff4b4b !important;
        background-color: #ffe6e6 !important;
    }
    
    /* –°–∫—Ä—ã–≤–∞–µ–º –ª–µ–π–±–ª—ã */
    .hidden-label label {
        display: none;
    }
    
    /* –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Ä–∞–¥–∏–æ–∫–Ω–æ–ø–æ–∫ –∫—Ä–µ–ø–ª–µ–Ω–∏–π */
    .vertical-radio .stRadio [role="radiogroup"] {
        display: flex;
        flex-direction: column;
        gap: 0.5rem;
    }
    
    /* –°—Ç–∏–ª–∏ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏–π */
    .selected-items-table {
        margin-top: 20px;
        margin-bottom: 20px;
    }
    
    /* –£–º–µ–Ω—å—à–∞–µ–º –æ—Ç—Å—Ç—É–ø—ã –º–µ–∂–¥—É –∫–æ–ª–æ–Ω–∫–∞–º–∏ */
    [data-testid="column"] {
        gap: 0px;
    }
    
    /* –ö–æ–º–ø–∞–∫—Ç–Ω—ã–µ –æ—Ç—Å—Ç—É–ø—ã –¥–ª—è –º–∞—Ç—Ä–∏—Ü—ã */
    .compact-matrix {
        gap: 0px;
        margin: 0px;
        padding: 0px;
    }
    
    /* –£–º–µ–Ω—å—à–∞–µ–º –æ—Ç—Å—Ç—É–ø—ã –≤ —è—á–µ–π–∫–∞—Ö –º–∞—Ç—Ä–∏—Ü—ã */
    .matrix-cell {
        padding: 0px !important;
        margin: 0px !important;
    }
    
    /* –£–º–µ–Ω—å—à–∞–µ–º –æ—Ç—Å—Ç—É–ø—ã –º–µ–∂–¥—É —Å—Ç—Ä–æ–∫–∞–º–∏ –º–∞—Ç—Ä–∏—Ü—ã */
    .row {
        margin: 0px !important;
        padding: 0px !important;
        gap: 0px !important;
    }
    
    /* –£–º–µ–Ω—å—à–∞–µ–º –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–µ –æ—Ç—Å—Ç—É–ø—ã */
    .element-container {
        margin: 0px !important;
        padding: 0px !important;
    }
    
    /* –ö–æ–º–ø–∞–∫—Ç–Ω—ã–µ —Å—Ç–∏–ª–∏ –¥–ª—è –≤—Å–µ–π –º–∞—Ç—Ä–∏—Ü—ã */
    .matrix-container {
        margin: 0px !important;
        padding: 0px !important;
        gap: 0px !important;
    }
    
    /* –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –æ—Ç—Å—Ç—É–ø—ã –≤–æ–∫—Ä—É–≥ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –ø–æ–ª–µ–π */
    .stTextInput {
        margin: 0px !important;
        padding: 0px !important;
    }
    
    /* –ö–æ–º–ø–∞–∫—Ç–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ */
    .compact-header {
        margin: 0px !important;
        padding: 2px !important;
    }
    
    /* –°–£–ü–ï–† –ö–û–ú–ü–ê–ö–¢–ù–´–ï –°–¢–ò–õ–ò –î–õ–Ø –ú–ê–¢–†–ò–¶–´ */
    /* –£–º–µ–Ω—å—à–∞–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É –∫–æ–ª–æ–Ω–∫–∞–º–∏ –º–∞—Ç—Ä–∏—Ü—ã –¥–æ –º–∏–Ω–∏–º—É–º–∞ */
    [data-testid="column"] {
        gap: 1px !important;
        margin: 0px !important;
        padding: 0px !important;
    }
    
    /* –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ –æ—Ç—Å—Ç—É–ø—ã –¥–ª—è –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –º–∞—Ç—Ä–∏—Ü—ã */
    .matrix-row {
        margin: 0px !important;
        padding: 0px !important;
        gap: 1px !important;
    }
    
    /* –£–ª—å—Ç—Ä–∞ –∫–æ–º–ø–∞–∫—Ç–Ω—ã–µ –ø–æ–ª—è –≤–≤–æ–¥–∞ */
    .stTextInput {
        margin: 0px !important;
        padding: 0px !important;
        min-height: 0px !important;
    }
    
    .stTextInput input {
        height: 32px !important;
        padding: 0px 1px !important;
        margin: 0px !important;
        border-radius: 2px !important;
        border: 1px solid #ccc !important;
    }
    
    /* –£–º–µ–Ω—å—à–∞–µ–º –æ—Ç—Å—Ç—É–ø—ã –º–µ–∂–¥—É —Å—Ç—Ä–æ–∫–∞–º–∏ –º–∞—Ç—Ä–∏—Ü—ã */
    [data-testid="stVerticalBlock"] > [data-testid="stHorizontalBlock"] {
        gap: 1px !important;
        margin: 0px !important;
        padding: 0px !important;
    }
    
    /* –ö–æ–º–ø–∞–∫—Ç–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –º–∞—Ç—Ä–∏—Ü—ã */
    .matrix-header-cell {
        padding: 1px 2px !important;
        margin: 0px !important;
        font-size: 11px !important;
        min-height: 20px !important;
    }
    
    /* –£–º–µ–Ω—å—à–∞–µ–º –≤—ã—Å–æ—Ç—É —Å—Ç—Ä–æ–∫ –º–∞—Ç—Ä–∏—Ü—ã */
    .matrix-input-row {
        min-height: 35px !important;
        margin: 0px !important;
        padding: 0px !important;
    }
</style>
""", unsafe_allow_html=True)

# === –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–±–æ—Ä–∞ ===
st.markdown("### –ú–∞—Ç—Ä–∏—Ü–∞ —Ä–∞–¥–∏–∞—Ç–æ—Ä–æ–≤")

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∏ —Ç–∏–ø —Ä–∞–¥–∏–∞—Ç–æ—Ä–∞
col1, col2 = st.columns([1, 2])

with col1:
    st.markdown("**–í–∏–¥ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è**")
    connection_options = ["VK-–ø—Ä–∞–≤–æ–µ", "VK-–ª–µ–≤–æ–µ", "K-–±–æ–∫–æ–≤–æ–µ"]
    connection = st.radio(
        "–≤–∏–¥_–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è",
        connection_options,
        index=connection_options.index(st.session_state.connection),
        label_visibility="collapsed"
    )
    st.session_state.connection = connection

with col2:
    st.markdown("**–¢–∏–ø —Ä–∞–¥–∏–∞—Ç–æ—Ä–∞**")
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    if connection == "VK-–ª–µ–≤–æ–µ":
        types = ["10", "11", "30", "33"]
    else:
        types = ["10", "11", "20", "21", "22", "30", "33"]
    
    if st.session_state.radiator_type not in types:
        st.session_state.radiator_type = types[0]
    
    rad_type = st.radio(
        "—Ç–∏–ø_—Ä–∞–¥–∏–∞—Ç–æ—Ä–∞",
        types,
        index=types.index(st.session_state.radiator_type),
        horizontal=True,
        label_visibility="collapsed"
    )
    st.session_state.radiator_type = rad_type

# === –ú–∞—Ç—Ä–∏—Ü–∞ —Ä–∞–¥–∏–∞—Ç–æ—Ä–æ–≤ ===
sheet_name = f"{st.session_state.connection} {st.session_state.radiator_type}"

if sheet_name not in sheets:
    st.error(f"–õ–∏—Å—Ç '{sheet_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω")
else:
    data = sheets[sheet_name]
    lengths = list(range(400, 2100, 100))
    heights = [300, 400, 500, 600, 900]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —è—á–µ–π–∫–∏ –¥–ª—è –ø–æ–¥—Å–≤–µ—Ç–∫–∏
    has_values = has_any_value()
    
    # –°–æ–∑–¥–∞–µ–º –º–∞—Ç—Ä–∏—Ü—É –∫–∞–∫ –≤ tkinter –≤–µ—Ä—Å–∏–∏
    st.markdown("---")
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –≤—ã—Å–æ—Ç
    height_cols = st.columns(len(heights) + 1)
    
    # –ü—É—Å—Ç–∞—è —è—á–µ–π–∫–∞ –≤ —É–≥–ª—É
    with height_cols[0]:
        st.markdown("")  # –ü—É—Å—Ç–æ–µ –º–µ—Å—Ç–æ
    
    # –ü–æ–¥–ø–∏—Å—å "–í—ã—Å–æ—Ç–∞ —Ä–∞–¥–∏–∞—Ç–æ—Ä–æ–≤, –º–º" –Ω–∞–¥ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ –≤—ã—Å–æ—Ç
    for j in range(len(heights) + 1):
        with height_cols[j]:
            if j == 0:
                # –ü–µ—Ä–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - –ø–æ–¥–ø–∏—Å—å "–î–ª–∏–Ω–∞"
                st.markdown("<div style='text-align: center; font-weight: bold; margin: 0; padding: 0;'></div>", unsafe_allow_html=True)
            else:
                # –û—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ - –≤—ã—Å–æ—Ç—ã
                st.markdown(f"<div style='text-align: center; font-weight: bold; margin: 0; padding: 0;'>{heights[j-1]}</div>", unsafe_allow_html=True)
    
    # –¢–µ–ª–æ –º–∞—Ç—Ä–∏—Ü—ã - –¥–ª–∏–Ω—ã –∏ —è—á–µ–π–∫–∏ –≤–≤–æ–¥–∞
    for i, length in enumerate(lengths):
        cols = st.columns(len(heights) + 1)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–æ–∫–∏ - –¥–ª–∏–Ω–∞ (–±–µ–∑ –∑–≤–µ–∑–¥–æ—á–µ–∫)
        with cols[0]:
            st.markdown(f"<div class='matrix-header' style='margin: 0; padding: 0;'>{length}</div>", unsafe_allow_html=True)
        
        # –Ø—á–µ–π–∫–∏ –≤–≤–æ–¥–∞
        for j, height in enumerate(heights):
            pattern = f"/{height}/{length}"
            match = data[data['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ'].str.contains(pattern, na=False)]
            
            if not match.empty:
                product = match.iloc[0]
                art = str(product['–ê—Ä—Ç–∏–∫—É–ª']).strip()
                # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –∫–ª—é—á –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è
                simple_key = f"{sheet_name.replace(' ', '_')}_{art}"
                current_value = st.session_state.entry_values.get(simple_key, "")
                
                # –£–±–∏—Ä–∞–µ–º –Ω—É–ª–∏ –∏–∑ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                display_value = current_value if current_value != "0" else ""
                
                with cols[j + 1]:
                    # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—è –≤–≤–æ–¥–∞
                    input_key = f"input_{i}_{j}_{simple_key}"
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç —Ñ–æ–Ω–∞
                    cell_color = get_cell_color(has_values, current_value)
                    
                    # –°–æ–∑–¥–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞ —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º —Å—Ç–∏–ª–µ–º
                    new_value = st.text_input(
                        f"–Ø—á–µ–π–∫–∞ {length}x{height}",
                        value=display_value,
                        key=input_key,
                        label_visibility="collapsed",
                        placeholder=""
                    )
                    
                    # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤–≤–æ–¥–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
                    if new_value != display_value:
                        if validate_input(new_value):
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∞–ª–∏–¥–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ –ø—Ä–æ—Å—Ç–æ–º—É –∫–ª—é—á—É
                            st.session_state.entry_values[simple_key] = new_value
                            st.session_state.last_validation_error = None
                            st.rerun()  # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–≤–µ—Ç–∞
                        else:
                            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—à–∏–±–∫—É –∏ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                            st.session_state.last_validation_error = f"–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥: '{new_value}'. –ú–æ–∂–Ω–æ –≤–≤–æ–¥–∏—Ç—å —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –∏ –∑–Ω–∞–∫ +"
                            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                            st.session_state.entry_values[simple_key] = current_value
                            st.rerun()
                    
                    # –ü—Ä–∏–º–µ–Ω—è–µ–º —Å—Ç–∏–ª–∏ —á–µ—Ä–µ–∑ CSS –∫–ª–∞—Å—Å—ã
                    st.markdown(f"""
                    <style>
                    [data-testid="stTextInput"] [value="{new_value}"] {{
                        background-color: {cell_color} !important;
                        text-align: center !important;
                        font-size: 14px !important;
                        font-weight: 500 !important;
                    }}
                    </style>
                    """, unsafe_allow_html=True)

# === –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ ===
if st.session_state.last_validation_error:
    st.error(st.session_state.last_validation_error)
    # –û—á–∏—â–∞–µ–º –æ—à–∏–±–∫—É –ø–æ—Å–ª–µ –ø–æ–∫–∞–∑–∞
    st.session_state.last_validation_error = None

# === –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã ===
st.markdown("---")

# –ö—Ä–µ–ø–ª–µ–Ω–∏—è –∏ —Å–∫–∏–¥–∫–∏ –≤ –∫–æ–º–ø–∞–∫—Ç–Ω–æ–º –≤–∏–¥–µ
col1, col2 = st.columns([1, 1])

with col1:
    st.markdown("**–¢–∏–ø –∫—Ä–µ–ø–ª–µ–Ω–∏—è**")
    bracket_options = ["–ù–∞—Å—Ç–µ–Ω–Ω—ã–µ –∫—Ä–æ–Ω—à—Ç–µ–π–Ω—ã", "–ù–∞–ø–æ–ª—å–Ω—ã–µ –∫—Ä–æ–Ω—à—Ç–µ–π–Ω—ã", "–ë–µ–∑ –∫—Ä–æ–Ω—à—Ç–µ–π–Ω–æ–≤"]
    
    # –î–æ–±–∞–≤–ª—è–µ–º CSS –∫–ª–∞—Å—Å –¥–ª—è –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–≥–æ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è
    st.markdown('<div class="vertical-radio">', unsafe_allow_html=True)
    bracket = st.radio(
        "—Ç–∏–ø_–∫—Ä–µ–ø–ª–µ–Ω–∏—è",
        bracket_options,
        index=bracket_options.index(st.session_state.bracket_type),
        label_visibility="collapsed"
    )
    st.markdown('</div>', unsafe_allow_html=True)
    st.session_state.bracket_type = bracket

with col2:
    st.markdown("**–°–∫–∏–¥–∫–∏**")
    disc_col1, disc_col2 = st.columns(2)
    
    with disc_col1:
        rad_disc = st.number_input(
            "–Ω–∞ —Ä–∞–¥–∏–∞—Ç–æ—Ä—ã, %",
            0.0, 100.0, st.session_state.radiator_discount, 1.0,
            key="rad_disc"
        )
        st.session_state.radiator_discount = rad_disc
    
    with disc_col2:
        br_disc = st.number_input(
            "–Ω–∞ –∫—Ä–æ–Ω—à—Ç–µ–π–Ω—ã, %",
            0.0, 100.0, st.session_state.bracket_discount, 1.0,
            key="br_disc"
        )
    st.session_state.bracket_discount = br_disc

# === –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —è—á–µ–π–∫–∞—Ö ===
filled_cells = sum(1 for val in st.session_state.entry_values.values() if val and val != "0")
if filled_cells > 0:
    st.success(f"‚úÖ –ó–∞–ø–æ–ª–Ω–µ–Ω–æ —è—á–µ–µ–∫: {filled_cells}")
    
    # === –í–´–ë–†–ê–ù–ù–´–ï –ü–û–ó–ò–¶–ò–ò (–≤—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º) ===
    selected_items = get_selected_items()
    if selected_items:
        st.markdown("### –í—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏")
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π (—Ä–∞–¥–∏–∞—Ç–æ—Ä—ã + –∫—Ä–æ–Ω—à—Ç–µ–π–Ω—ã)
        all_items = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–¥–∏–∞—Ç–æ—Ä—ã
        for item in selected_items:
            all_items.append({
                '–ê—Ä—Ç–∏–∫—É–ª': item['–ê—Ä—Ç–∏–∫—É–ª'],
                '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ': item['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ'],
                '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ': item['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'],
                '–¢–∏–ø': '–†–∞–¥–∏–∞—Ç–æ—Ä'
            })
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫—Ä–æ–Ω—à—Ç–µ–π–Ω—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–∞–¥–∏–∞—Ç–æ—Ä–∞
        for radiator in selected_items:
            brackets = get_brackets_for_radiator(radiator, st.session_state.bracket_type)
            for bracket in brackets:
                all_items.append({
                    '–ê—Ä—Ç–∏–∫—É–ª': bracket['–ê—Ä—Ç–∏–∫—É–ª'],
                    '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ': bracket['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ'],
                    '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ': bracket['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'],
                    '–¢–∏–ø': '–ö—Ä–æ–Ω—à—Ç–µ–π–Ω'
                })
        
        # –°–æ–∑–¥–∞–µ–º DataFrame –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        df = pd.DataFrame(all_items)
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É –∏ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—é, —Å—É–º–º–∏—Ä—É—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        grouped_df = df.groupby(['–ê—Ä—Ç–∏–∫—É–ª', '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ', '–¢–∏–ø']).agg({
            '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ': 'sum'
        }).reset_index()
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
        st.dataframe(grouped_df, use_container_width=True)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        total_radiators = sum(item['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'] for item in selected_items)
        total_brackets = sum(bracket['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'] for radiator in selected_items 
                           for bracket in get_brackets_for_radiator(radiator, st.session_state.bracket_type))
        
        st.info(f"**–ò—Ç–æ–≥–æ –ø–æ–∑–∏—Ü–∏–π:** {len(grouped_df)}, **–†–∞–¥–∏–∞—Ç–æ—Ä–æ–≤:** {total_radiators}, **–ö—Ä–æ–Ω—à—Ç–µ–π–Ω–æ–≤:** {total_brackets}")

# === –ö–Ω–æ–ø–∫–∞ —Å–±—Ä–æ—Å–∞ ===
if st.button("üîÑ –°–±—Ä–æ—Å–∏—Ç—å –≤—Å–µ"):
    st.session_state.entry_values.clear()
    st.session_state.radiator_discount = 0.0
    st.session_state.bracket_discount = 0.0
    st.session_state.bracket_type = "–ù–∞—Å—Ç–µ–Ω–Ω—ã–µ –∫—Ä–æ–Ω—à—Ç–µ–π–Ω—ã"
    st.session_state.last_validation_error = None
    st.session_state.show_selected_items = False
    st.rerun()

# === –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è (–º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å) ===
with st.expander("–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"):
    st.write("–ó–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è:", {k: v for k, v in st.session_state.entry_values.items() if v and v != "0"})
    st.write("–í—Å–µ –∑–Ω–∞—á–µ–Ω–∏—è:", dict(st.session_state.entry_values))
    st.write("–ï—Å—Ç—å –ª–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ —è—á–µ–π–∫–∏:", has_any_value())
    st.write("–¢–µ–∫—É—â–∏–π –ª–∏—Å—Ç:", sheet_name)
    st.write("–í—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏:", get_selected_items())
    st.write("–ö–ª—é—á–∏ entry_values:", list(st.session_state.entry_values.keys()))