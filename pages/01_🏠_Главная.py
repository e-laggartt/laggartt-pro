import streamlit as st
import pandas as pd
import re
from utils.session_manager import init_session_state

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
init_session_state()

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
@st.cache_data
def load_sheets():
    sheets = pd.read_excel("data/–ú–∞—Ç—Ä–∏—Ü–∞.xlsx", sheet_name=None, engine="openpyxl")
    sheets.pop("–ö—Ä–æ–Ω—à—Ç–µ–π–Ω—ã", None)  # –£–±–∏—Ä–∞–µ–º –ª–∏—Å—Ç –∫—Ä–æ–Ω—à—Ç–µ–π–Ω–æ–≤ –∏–∑ –º–∞—Ç—Ä–∏—Ü—ã
    return sheets

sheets = load_sheets()

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏ —Ç–∏–ø–æ–≤
CONNECTIONS = ["VK-–ø—Ä–∞–≤–æ–µ", "VK-–ª–µ–≤–æ–µ", "K-–±–æ–∫–æ–≤–æ–µ"]
RADIATOR_TYPES = {
    "VK-–ª–µ–≤–æ–µ": ["10", "11", "30", "33"],
    "VK-–ø—Ä–∞–≤–æ–µ": ["10", "11", "20", "21", "22", "30", "33"],
    "K-–±–æ–∫–æ–≤–æ–µ": ["10", "11", "20", "21", "22", "30", "33"],
}

# === –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å ===
with st.sidebar:
    st.image("assets/Lagar.png", width=150)
    st.markdown("### üîß –ü–ê–†–ê–ú–ï–¢–†–´ –ü–û–î–ë–û–†–ê")

    connection = st.radio(
        "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ:",
        options=CONNECTIONS,
        format_func=lambda x: x.replace("VK-", "VK-–Ω–∏–∂–Ω–µ–µ ").replace("K-", "K-–±–æ–∫–æ–≤–æ–µ"),
        key="connection"
    )

    available_types = RADIATOR_TYPES[connection]
    radiator_type = st.radio("–¢–∏–ø —Ä–∞–¥–∏–∞—Ç–æ—Ä–∞:", available_types, key="radiator_type")

    bracket_type = st.radio(
        "–ö—Ä–µ–ø–ª–µ–Ω–∏–µ:",
        ["–ù–∞—Å—Ç–µ–Ω–Ω—ã–µ –∫—Ä–æ–Ω—à—Ç–µ–π–Ω—ã", "–ù–∞–ø–æ–ª—å–Ω—ã–µ –∫—Ä–æ–Ω—à—Ç–µ–π–Ω—ã", "–ë–µ–∑ –∫—Ä–æ–Ω—à—Ç–µ–π–Ω–æ–≤"],
        key="bracket_type"
    )

    col1, col2 = st.columns(2)
    with col1:
        radiator_discount = st.number_input("–°–∫–∏–¥–∫–∞ –Ω–∞ —Ä–∞–¥–∏–∞—Ç–æ—Ä—ã, %:", min_value=0.0, max_value=100.0, step=1.0, key="radiator_discount")
    with col2:
        bracket_discount = st.number_input("–°–∫–∏–¥–∫–∞ –Ω–∞ –∫—Ä–æ–Ω—à—Ç–µ–π–Ω—ã, %:", min_value=0.0, max_value=100.0, step=1.0, key="bracket_discount")

# === –ú–∞—Ç—Ä–∏—Ü–∞ ===
st.title("RadiaTool Pro v2.0")
st.markdown("#### –ú–∞—Ç—Ä–∏—Ü–∞ —Ä–∞–¥–∏–∞—Ç–æ—Ä–æ–≤")

heights = [300, 400, 500, 600, 900]
lengths = list(range(400, 2100, 100))  # 400‚Äì2000 —Å —à–∞–≥–æ–º 100

sheet_key = f"{connection} {radiator_type}"
if sheet_key not in sheets:
    st.error(f"–õ–∏—Å—Ç '{sheet_key}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ñ–∞–π–ª–µ –ú–∞—Ç—Ä–∏—Ü–∞.xlsx")
    st.stop()

df_sheet = sheets[sheet_key]

# –°–æ–∑–¥–∞—ë–º —Å–ª–æ–≤–∞—Ä—å: (–¥–ª–∏–Ω–∞, –≤—ã—Å–æ—Ç–∞) ‚Üí –∞—Ä—Ç–∏–∫—É–ª –∏ –¥–∞–Ω–Ω—ã–µ
product_map = {}
for _, row in df_sheet.iterrows():
    name = str(row["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ"])
    match = re.search(r"/(\d+)/(\d+)\s*–º–º", name)
    if match:
        h, l = int(match.group(1)), int(match.group(2))
        product_map[(l, h)] = {
            "–∞—Ä—Ç–∏–∫—É–ª": str(row["–ê—Ä—Ç–∏–∫—É–ª"]).strip(),
            "–º–æ—â–Ω–æ—Å—Ç—å": row.get("–ú–æ—â–Ω–æ—Å—Ç—å, –í—Ç", ""),
            "–≤–µ—Å": row.get("–í–µ—Å, –∫–≥", 0),
            "–æ–±—ä—ë–º": row.get("–û–±—ä–µ–º, –º3", 0),
            "—Ü–µ–Ω–∞": row.get("–¶–µ–Ω–∞, —Ä—É–±", 0),
        }

# –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Å—Ç–æ–ª–±—Ü–æ–≤ (–≤—ã—Å–æ—Ç—ã)
cols = st.columns([1] + [1] * len(heights))
cols[0].markdown("**–î–ª–∏–Ω–∞ \\ –í—ã—Å–æ—Ç–∞**")
for j, h in enumerate(heights):
    cols[j + 1].markdown(f"**{h}**", help="–í—ã—Å–æ—Ç–∞ —Ä–∞–¥–∏–∞—Ç–æ—Ä–∞, –º–º")

# –°—Ç—Ä–æ–∫–∞ –¥–ª—è –∫–∞–∂–¥–æ–π –¥–ª–∏–Ω—ã
for i, length in enumerate(lengths):
    cols = st.columns([1] + [1] * len(heights))
    cols[0].markdown(f"**{length}**", help="–î–ª–∏–Ω–∞ —Ä–∞–¥–∏–∞—Ç–æ—Ä–∞, –º–º")
    for j, height in enumerate(heights):
        key = (sheet_key, length, height)
        product = product_map.get((length, height))

        if product:
            art = product["–∞—Ä—Ç–∏–∫—É–ª"]
            value = st.session_state.entry_values.get((sheet_key, art), "")
            tooltip = (
                f"–ê—Ä—Ç–∏–∫—É–ª: {art}\n"
                f"–ú–æ—â–Ω–æ—Å—Ç—å: {product['–º–æ—â–Ω–æ—Å—Ç—å']} –í—Ç\n"
                f"–í–µ—Å: {product['–≤–µ—Å']} –∫–≥\n"
                f"–û–±—ä—ë–º: {product['–æ–±—ä—ë–º']} –º¬≥\n"
                f"–¶–µ–Ω–∞: {product['—Ü–µ–Ω–∞']} —Ä—É–±"
            )
            with cols[j + 1]:
                user_input = st.text_input(
                    label="",
                    value=str(value),
                    key=f"input_{sheet_key}_{length}_{height}",
                    help=tooltip,
                    label_visibility="collapsed",
                )
                # –í–∞–ª–∏–¥–∞—Ü–∏—è: —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –∏ +
                if user_input and not re.fullmatch(r"[\d+]*", user_input):
                    st.warning("–¢–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –∏ '+'", icon="‚ö†Ô∏è")
                else:
                    if user_input != value:
                        st.session_state.entry_values[(sheet_key, art)] = user_input
                    # –ü–æ–¥—Å–≤–µ—Ç–∫–∞
                    if user_input:
                        st.markdown('<style>div[data-baseweb="input"] input { background-color: #e6f3ff; }</style>', unsafe_allow_html=True)
        else:
            cols[j + 1].markdown("‚Äî")