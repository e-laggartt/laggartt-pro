import streamlit as st
import pandas as pd
import numpy as np
from utils.data_loader import load_radiator_data
from utils.calculator import parse_quantity
from utils.session_manager import initialize_session_state

def create_radiator_matrix():
    """–°–æ–∑–¥–∞–µ—Ç –º–∞—Ç—Ä–∏—Ü—É —Ä–∞–¥–∏–∞—Ç–æ—Ä–æ–≤ —Å –≤–≤–æ–¥–æ–º –¥–∞–Ω–Ω—ã—Ö"""
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏
    initialize_session_state()
    
    st.title("üîß –ü–æ–¥–±–æ—Ä —Ä–∞–¥–∏–∞—Ç–æ—Ä–æ–≤ METEOR")
    st.markdown("---")
    
    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    with st.sidebar:
        st.header("‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–±–æ—Ä–∞")
        
        # –í—ã–±–æ—Ä –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        connection = st.radio(
            "**–í–∏–¥ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:**",
            ["VK-–ø—Ä–∞–≤–æ–µ", "VK-–ª–µ–≤–æ–µ", "K-–±–æ–∫–æ–≤–æ–µ"],
            key="connection"
        )
        
        # –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –≤—ã–±–æ—Ä —Ç–∏–ø–∞ —Ä–∞–¥–∏–∞—Ç–æ—Ä–∞
        if connection == "VK-–ª–µ–≤–æ–µ":
            radiator_types = ["10", "11", "30", "33"]
        else:
            radiator_types = ["10", "11", "20", "21", "22", "30", "33"]
            
        radiator_type = st.radio(
            "**–¢–∏–ø —Ä–∞–¥–∏–∞—Ç–æ—Ä–∞:**",
            radiator_types,
            key="radiator_type"
        )
        
        # –í—ã–±–æ—Ä –∫—Ä–æ–Ω—à—Ç–µ–π–Ω–æ–≤
        bracket_type = st.radio(
            "**–¢–∏–ø –∫—Ä–µ–ø–ª–µ–Ω–∏—è:**",
            ["–ù–∞—Å—Ç–µ–Ω–Ω—ã–µ –∫—Ä–æ–Ω—à—Ç–µ–π–Ω—ã", "–ù–∞–ø–æ–ª—å–Ω—ã–µ –∫—Ä–æ–Ω—à—Ç–µ–π–Ω—ã", "–ë–µ–∑ –∫—Ä–æ–Ω—à—Ç–µ–π–Ω–æ–≤"],
            key="bracket_type"
        )
        
        st.markdown("---")
        st.subheader("üí∞ –°–∫–∏–¥–∫–∏")
        
        col1, col2 = st.columns(2)
        with col1:
            radiator_discount = st.number_input(
                "–†–∞–¥–∏–∞—Ç–æ—Ä—ã, %:",
                min_value=0.0,
                max_value=100.0,
                value=0.0,
                step=0.5,
                key="radiator_discount"
            )
        
        with col2:
            bracket_discount = st.number_input(
                "–ö—Ä–æ–Ω—à—Ç–µ–π–Ω—ã, %:",
                min_value=0.0,
                max_value=100.0,
                value=0.0,
                step=0.5,
                key="bracket_discount"
            )
        
        st.markdown("---")
        st.subheader("üõ†Ô∏è –ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã")
        
        if st.button("üìã –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏", use_container_width=True):
            st.session_state.show_preview = True
            
        if st.button("üóëÔ∏è –°–±—Ä–æ—Å –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö", use_container_width=True):
            for key in list(st.session_state.keys()):
                if key.startswith('matrix_'):
                    del st.session_state[key]
            st.rerun()
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å - –º–∞—Ç—Ä–∏—Ü–∞ —Ä–∞–¥–∏–∞—Ç–æ—Ä–æ–≤
    st.header(f"–ú–∞—Ç—Ä–∏—Ü–∞ —Ä–∞–¥–∏–∞—Ç–æ—Ä–æ–≤: {connection} {radiator_type}")
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–¥–∏–∞—Ç–æ—Ä–æ–≤
    sheet_name = f"{connection} {radiator_type}"
    radiator_data = load_radiator_data(sheet_name)
    
    if radiator_data is None:
        st.error(f"–î–∞–Ω–Ω—ã–µ –¥–ª—è '{sheet_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Ç—Ä–∏—Ü—ã
    create_matrix_interface(radiator_data, sheet_name)
    
    # –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏
    if st.session_state.get('show_preview', False):
        show_specification_preview(radiator_data, sheet_name)

def create_matrix_interface(radiator_data, sheet_name):
    """–°–æ–∑–¥–∞–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –º–∞—Ç—Ä–∏—Ü—ã —Ä–∞–¥–∏–∞—Ç–æ—Ä–æ–≤"""
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑–º–µ—Ä—ã
    heights = [300, 400, 500, 600, 900]
    lengths = list(range(400, 2100, 100))  # 400-2000 —Å —à–∞–≥–æ–º 100
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –º–∞—Ç—Ä–∏—Ü—ã
    matrix_container = st.container()
    
    with matrix_container:
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –º–∞—Ç—Ä–∏—Ü—ã
        cols = st.columns([2] + [1] * len(heights))
        
        with cols[0]:
            st.markdown("**–î–ª–∏–Ω–∞ ‚Üí<br>–í—ã—Å–æ—Ç–∞ ‚Üì**", unsafe_allow_html=True)
        
        for i, height in enumerate(heights):
            with cols[i + 1]:
                st.markdown(f"**{height}**")
        
        # –°—Ç—Ä–æ–∫–∏ –º–∞—Ç—Ä–∏—Ü—ã
        for length in lengths:
            cols = st.columns([2] + [1] * len(heights))
            
            with cols[0]:
                st.markdown(f"**{length}**")
            
            for i, height in enumerate(heights):
                with cols[i + 1]:
                    create_matrix_cell(length, height, radiator_data, sheet_name)

def create_matrix_cell(length, height, radiator_data, sheet_name):
    """–°–æ–∑–¥–∞–µ—Ç —è—á–µ–π–∫—É –º–∞—Ç—Ä–∏—Ü—ã —Å –≤–≤–æ–¥–æ–º –¥–∞–Ω–Ω—ã—Ö"""
    
    # –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Ä–∞–¥–∏–∞—Ç–æ—Ä
    pattern = f"/{height}/{length}"
    matching_radiators = radiator_data[
        radiator_data['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ'].str.contains(pattern, na=False)
    ]
    
    if matching_radiators.empty:
        st.markdown("‚Äî")
        return
    
    radiator = matching_radiators.iloc[0]
    articul = str(radiator['–ê—Ä—Ç–∏–∫—É–ª']).strip()
    cell_key = f"matrix_{sheet_name}_{articul}"
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–Ω–∞—á–µ–Ω–∏—è —è—á–µ–π–∫–∏
    if cell_key not in st.session_state:
        st.session_state[cell_key] = ""
    
    # –°–æ–∑–¥–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
    current_value = st.session_state[cell_key]
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç —Ñ–æ–Ω–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç–∏
    if current_value and parse_quantity(current_value) > 0:
        background_color = "#e6f3ff"  # –ì–æ–ª—É–±–æ–π –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö
    else:
        background_color = "#ffffff"  # –ë–µ–ª—ã–π –¥–ª—è –ø—É—Å—Ç—ã—Ö
    
    # –ü–æ–ª–µ –≤–≤–æ–¥–∞ —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º —Å—Ç–∏–ª–µ–º
    new_value = st.text_input(
        "",
        value=current_value,
        key=f"input_{cell_key}",
        label_visibility="collapsed",
        placeholder="0",
        help=f"""
        –ê—Ä—Ç–∏–∫—É–ª: {articul}
        –ú–æ—â–Ω–æ—Å—Ç—å: {radiator.get('–ú–æ—â–Ω–æ—Å—Ç—å, –í—Ç', 'N/A')} –í—Ç
        –í–µ—Å: {radiator.get('–í–µ—Å, –∫–≥', 'N/A')} –∫–≥
        –û–±—ä–µ–º: {radiator.get('–û–±—ä–µ–º, –º3', 'N/A')} –º¬≥
        –¶–µ–Ω–∞: {radiator.get('–¶–µ–Ω–∞, —Ä—É–±', 'N/A')} —Ä—É–±
        """
    )
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤–≤–æ–¥–∞
    if new_value != current_value:
        if validate_matrix_input(new_value):
            st.session_state[cell_key] = new_value
            st.rerun()
        else:
            st.session_state[cell_key] = current_value
            st.error("–†–∞–∑—Ä–µ—à–µ–Ω—ã —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –∏ –∑–Ω–∞–∫ '+'")

def validate_matrix_input(value):
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –≤–≤–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ –º–∞—Ç—Ä–∏—Ü–µ"""
    if value == "":
        return True
    
    # –†–∞–∑—Ä–µ—à–∞–µ–º —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –∏ –∑–Ω–∞–∫ +
    if all(char.isdigit() or char == '+' for char in value):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–Ω–∞–∫ + –Ω–µ –≤ –Ω–∞—á–∞–ª–µ/–∫–æ–Ω—Ü–µ –∏ –Ω–µ –¥—É–±–ª–∏—Ä—É–µ—Ç—Å—è
        cleaned = value.strip('+')
        if '++' not in cleaned:
            return True
    
    return False

def show_specification_preview(radiator_data, sheet_name):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    
    st.markdown("---")
    st.header("üìã –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏")
    
    # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –º–∞—Ç—Ä–∏—Ü—ã
    spec_data = collect_specification_data(radiator_data, sheet_name)
    
    if spec_data.empty:
        st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏")
        return
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏
    display_specification_table(spec_data)
    
    # –ö–Ω–æ–ø–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞
    col1, col2, col3 = st.columns(3)
    
    with col1:
        if st.button("üìä –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel", use_container_width=True):
            export_to_excel(spec_data)
    
    with col2:
        if st.button("üìÑ –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV", use_container_width=True):
            export_to_csv(spec_data)
    
    with col3:
        if st.button("üìã –ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏", use_container_width=True):
            st.switch_page("pages/02_üìã_–°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è.py")

def collect_specification_data(radiator_data, sheet_name):
    """–°–æ–±–∏—Ä–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏–∑ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ–π –º–∞—Ç—Ä–∏—Ü—ã"""
    
    spec_rows = []
    
    for _, radiator in radiator_data.iterrows():
        articul = str(radiator['–ê—Ä—Ç–∏–∫—É–ª']).strip()
        cell_key = f"matrix_{sheet_name}_{articul}"
        
        quantity = parse_quantity(st.session_state.get(cell_key, ""))
        
        if quantity > 0:
            price = float(radiator.get('–¶–µ–Ω–∞, —Ä—É–±', 0))
            discount = st.session_state.get('radiator_discount', 0.0)
            discounted_price = price * (1 - discount / 100)
            total = discounted_price * quantity
            
            spec_rows.append({
                '–ê—Ä—Ç–∏–∫—É–ª': articul,
                '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ': radiator['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ'],
                '–ú–æ—â–Ω–æ—Å—Ç—å, –í—Ç': radiator.get('–ú–æ—â–Ω–æ—Å—Ç—å, –í—Ç', 0),
                '–¶–µ–Ω–∞, —Ä—É–± (—Å –ù–î–°)': price,
                '–°–∫–∏–¥–∫–∞, %': discount,
                '–¶–µ–Ω–∞ —Å–æ —Å–∫–∏–¥–∫–æ–π, —Ä—É–± (—Å –ù–î–°)': discounted_price,
                '–ö–æ–ª-–≤–æ': quantity,
                '–°—É–º–º–∞, —Ä—É–± (—Å –ù–î–°)': total
            })
    
    return pd.DataFrame(spec_rows)

def display_specification_table(spec_data):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Ç–∞–±–ª–∏—Ü—É —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    
    if not spec_data.empty:
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω—É–º–µ—Ä–∞—Ü–∏—é
        spec_data_display = spec_data.copy()
        spec_data_display.insert(0, '‚Ññ', range(1, len(spec_data) + 1))
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —á–∏—Å–ª–æ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏
        format_dict = {
            '–¶–µ–Ω–∞, —Ä—É–± (—Å –ù–î–°)': '{:,.2f}',
            '–¶–µ–Ω–∞ —Å–æ —Å–∫–∏–¥–∫–æ–π, —Ä—É–± (—Å –ù–î–°)': '{:,.2f}', 
            '–°—É–º–º–∞, —Ä—É–± (—Å –ù–î–°)': '{:,.2f}'
        }
        
        st.dataframe(
            spec_data_display,
            use_container_width=True,
            hide_index=True
        )
        
        # –ò—Ç–æ–≥–∏
        total_sum = spec_data['–°—É–º–º–∞, —Ä—É–± (—Å –ù–î–°)'].sum()
        total_qty = spec_data['–ö–æ–ª-–≤–æ'].sum()
        
        col1, col2 = st.columns(2)
        with col1:
            st.metric("–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ", f"{total_qty} —à—Ç.")
        with col2:
            st.metric("–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å", f"{total_sum:,.2f} —Ä—É–±")

def export_to_excel(spec_data):
    """–≠–∫—Å–ø–æ—Ä—Ç –≤ Excel"""
    # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ Excel
    st.success("–§—É–Ω–∫—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ Excel –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞")

def export_to_csv(spec_data):
    """–≠–∫—Å–ø–æ—Ä—Ç –≤ CSV"""
    # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ CSV
    st.success("–§—É–Ω–∫—Ü–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ CSV –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞")

if __name__ == "__main__":
    create_radiator_matrix()