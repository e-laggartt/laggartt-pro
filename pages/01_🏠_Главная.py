# pages/01_üè†_–ì–ª–∞–≤–Ω–∞—è.py
import streamlit as st
import pandas as pd
import os

st.set_page_config(
    page_title="–ì–ª–∞–≤–Ω–∞—è - RadiaTool Pro",
    page_icon="üè†",
    layout="wide"
)

def parse_quantity(value):
    """–ü–∞—Ä—Å–∏–Ω–≥ –∫–æ–ª–∏—á–µ—Å—Ç–≤ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ñ–æ—Ä–º—É–ª"""
    if not value:
        return 0
    
    value = str(value).strip()
    
    # –£–¥–∞–ª–µ–Ω–∏–µ –ª–∏—à–Ω–∏—Ö +
    while value.startswith('+'):
        value = value[1:]
    while value.endswith('+'):
        value = value[:-1]
        
    if not value:
        return 0
    
    # –°—É–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∞—Å—Ç–µ–π
    try:
        parts = value.split('+')
        total = sum(int(round(float(part))) for part in parts if part.strip())
        return total
    except (ValueError, TypeError):
        return 0

def load_radiator_data():
    """–ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏–∑ Excel —Ñ–∞–π–ª–∞"""
    try:
        file_path = "data/–ú–∞—Ç—Ä–∏—Ü–∞.xlsx"
        if os.path.exists(file_path):
            # –ß—Ç–µ–Ω–∏–µ –≤—Å–µ—Ö –ª–∏—Å—Ç–æ–≤ Excel
            sheets_dict = pd.read_excel(file_path, sheet_name=None, engine='openpyxl')
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            processed_sheets = {}
            for sheet_name, df in sheets_dict.items():
                # –ü—Ä–∏–≤–µ–¥–µ–Ω–∏–µ –∞—Ä—Ç–∏–∫—É–ª–æ–≤ –∫ —Å—Ç—Ä–æ–∫–æ–≤–æ–º—É —Ç–∏–ø—É
                if '–ê—Ä—Ç–∏–∫—É–ª' in df.columns:
                    df['–ê—Ä—Ç–∏–∫—É–ª'] = df['–ê—Ä—Ç–∏–∫—É–ª'].astype(str)
                
                # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö —á–∏—Å–ª–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
                numeric_columns = ['–ú–æ—â–Ω–æ—Å—Ç—å, –í—Ç', '–í–µ—Å, –∫–≥', '–û–±—ä–µ–º, –º3', '–¶–µ–Ω–∞, —Ä—É–±']
                for col in numeric_columns:
                    if col in df.columns:
                        df[col] = pd.to_numeric(df[col], errors='coerce').fillna(0)
                
                processed_sheets[sheet_name] = df
            
            return processed_sheets
        else:
            st.error(f"‚ùå –§–∞–π–ª {file_path} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return {}
            
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return {}

def find_radiator_by_size(df, height, length):
    """–ü–æ–∏—Å–∫ —Ä–∞–¥–∏–∞—Ç–æ—Ä–∞ –ø–æ –≤—ã—Å–æ—Ç–µ –∏ –¥–ª–∏–Ω–µ –≤ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    try:
        # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–∏
        pattern = f"/{height}–º–º/{length}–º–º"
        
        # –ò—â–µ–º –≤ —Å—Ç–æ–ª–±—Ü–µ '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ'
        for _, row in df.iterrows():
            name = str(row.get('–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ', ''))
            if pattern in name:
                return row
        
        return None
        
    except Exception as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ä–∞–¥–∏–∞—Ç–æ—Ä–∞: {e}")
        return None

def main():
    st.title("üè† –ú–∞—Ç—Ä–∏—Ü–∞ —Ä–∞–¥–∏–∞—Ç–æ—Ä–æ–≤")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è session_state
    if 'entry_values' not in st.session_state:
        st.session_state.entry_values = {}
    if 'connection' not in st.session_state:
        st.session_state.connection = "VK-–ø—Ä–∞–≤–æ–µ"
    if 'radiator_type' not in st.session_state:
        st.session_state.radiator_type = "10"
    if 'bracket_type' not in st.session_state:
        st.session_state.bracket_type = "–ù–∞—Å—Ç–µ–Ω–Ω—ã–µ –∫—Ä–æ–Ω—à—Ç–µ–π–Ω—ã"
    if 'discounts' not in st.session_state:
        st.session_state.discounts = {"radiators": 0, "brackets": 0}
    if 'sheets' not in st.session_state:
        st.session_state.sheets = load_radiator_data()
    
    sheets = st.session_state.sheets
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
    if not sheets:
        st.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Ä–∞–¥–∏–∞—Ç–æ—Ä–æ–≤.")
        st.info("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–∞–π–ª data/–ú–∞—Ç—Ä–∏—Ü–∞.xlsx —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–∞–Ω–Ω—ã–µ.")
        return
    
    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    with st.sidebar:
        st.header("üîß –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–±–æ—Ä–∞")
        
        # –í—ã–±–æ—Ä –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        st.subheader("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ")
        connection = st.radio(
            "–í–∏–¥ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:",
            ["VK-–ø—Ä–∞–≤–æ–µ", "VK-–ª–µ–≤–æ–µ", "K-–±–æ–∫–æ–≤–æ–µ"],
            index=0,
            key="connection_radio"
        )
        st.session_state.connection = connection
        
        # –í—ã–±–æ—Ä —Ç–∏–ø–∞ —Ä–∞–¥–∏–∞—Ç–æ—Ä–∞
        st.subheader("–¢–∏–ø —Ä–∞–¥–∏–∞—Ç–æ—Ä–∞")
        if connection == "VK-–ª–µ–≤–æ–µ":
            rad_types = ["10", "11", "30", "33"]
        else:
            rad_types = ["10", "11", "20", "21", "22", "30", "33"]
            
        radiator_type = st.radio(
            "–¢–∏–ø:",
            rad_types,
            index=0,
            key="radiator_radio"
        )
        st.session_state.radiator_type = radiator_type
        
        # –í—ã–±–æ—Ä –∫—Ä–æ–Ω—à—Ç–µ–π–Ω–æ–≤
        st.subheader("–ö—Ä–µ–ø–ª–µ–Ω–∏–µ")
        bracket_type = st.radio(
            "–¢–∏–ø –∫—Ä–µ–ø–ª–µ–Ω–∏—è:",
            ["–ù–∞—Å—Ç–µ–Ω–Ω—ã–µ –∫—Ä–æ–Ω—à—Ç–µ–π–Ω—ã", "–ù–∞–ø–æ–ª—å–Ω—ã–µ –∫—Ä–æ–Ω—à—Ç–µ–π–Ω—ã", "–ë–µ–∑ –∫—Ä–æ–Ω—à—Ç–µ–π–Ω–æ–≤"],
            index=0,
            key="bracket_radio"
        )
        st.session_state.bracket_type = bracket_type
        
        # –°–∫–∏–¥–∫–∏
        st.subheader("üí∞ –°–∫–∏–¥–∫–∏")
        col1, col2 = st.columns(2)
        with col1:
            rad_discount = st.number_input(
                "–†–∞–¥–∏–∞—Ç–æ—Ä—ã, %",
                min_value=0,
                max_value=100,
                value=int(st.session_state.discounts["radiators"]),
                step=1,
                key="rad_discount_input"
            )
        with col2:
            br_discount = st.number_input(
                "–ö—Ä–æ–Ω—à—Ç–µ–π–Ω—ã, %",
                min_value=0,
                max_value=100,
                value=int(st.session_state.discounts["brackets"]),
                step=1,
                key="br_discount_input"
            )
        
        st.session_state.discounts = {
            "radiators": rad_discount,
            "brackets": br_discount
        }
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        st.subheader("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        show_tooltips = st.checkbox(
            "–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏", 
            value=True,
            key="tooltips_checkbox"
        )
        st.session_state.show_tooltips = show_tooltips
        
        # –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        st.markdown("---")
        st.subheader("üöÄ –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è")
        
        if st.button("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –º–∞—Ç—Ä–∏—Ü—É", type="secondary"):
            st.session_state.entry_values = {}
            st.rerun()
            
        if st.button("üìã –ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏", type="primary"):
            st.switch_page("pages/02_üìã_–°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è.py")
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∞–Ω–Ω—ã—Ö
        st.markdown("---")
        st.subheader("üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
        st.write(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ –ª–∏—Å—Ç–æ–≤: {len(sheets)}")
        total_products = sum(len(df) for df in sheets.values())
        st.write(f"–í—Å–µ–≥–æ —Ä–∞–¥–∏–∞—Ç–æ—Ä–æ–≤: {total_products}")
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å - –º–∞—Ç—Ä–∏—Ü–∞ —Ä–∞–¥–∏–∞—Ç–æ—Ä–æ–≤
    st.header(f"üìä –ú–∞—Ç—Ä–∏—Ü–∞: {connection} {radiator_type}")
    
    sheet_name = f"{connection} {radiator_type}"
    if sheet_name not in sheets:
        st.error(f"‚ùå –õ–∏—Å—Ç '{sheet_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –¥–∞–Ω–Ω—ã—Ö")
        st.info("üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –ª–∏—Å—Ç—ã –≤ –¥–∞–Ω–Ω—ã—Ö:")
        for available_sheet in sheets.keys():
            st.write(f"- {available_sheet}")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –ª–∏—Å—Ç –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        if sheets:
            first_sheet = list(sheets.keys())[0]
            st.info(f"üîß –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–∏—Å—Ç: {first_sheet}")
            df = sheets[first_sheet]
        else:
            return
    else:
        df = sheets[sheet_name]
    
    # –†–∞–∑–º–µ—Ä—ã –º–∞—Ç—Ä–∏—Ü—ã —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó
    lengths = list(range(400, 2100, 100))  # 400-2000 —Å —à–∞–≥–æ–º 100
    heights = [300, 400, 500, 600, 900]
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Ç—Ä–∏—Ü—ã
    st.markdown("#### –î–ª–∏–Ω–∞ —Ä–∞–¥–∏–∞—Ç–æ—Ä–æ–≤, –º–º ‚Üí")
    
    # –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Å—Ç–æ–ª–±—Ü–æ–≤ (–≤—ã—Å–æ—Ç—ã)
    cols = st.columns(len(heights) + 1)
    with cols[0]:
        st.markdown("**–í—ã—Å–æ—Ç–∞<br>—Ä–∞–¥–∏–∞—Ç–æ—Ä–æ–≤, –º–º**", unsafe_allow_html=True)
    
    for j, height in enumerate(heights):
        with cols[j + 1]:
            st.markdown(f"**{height}**")
    
    # –°—Ç—Ä–æ–∫–∏ –º–∞—Ç—Ä–∏—Ü—ã
    total_filled = 0
    total_quantity = 0
    
    for i, length in enumerate(lengths):
        cols = st.columns(len(heights) + 1)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–æ–∫–∏ (–¥–ª–∏–Ω–∞)
        with cols[0]:
            st.markdown(f"**{length}**")
        
        # –Ø—á–µ–π–∫–∏ –º–∞—Ç—Ä–∏—Ü—ã
        for j, height in enumerate(heights):
            with cols[j + 1]:
                # –ü–æ–∏—Å–∫ —Ä–∞–¥–∏–∞—Ç–æ—Ä–∞ –ø–æ —Ä–∞–∑–º–µ—Ä–∞–º –≤ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                product = find_radiator_by_size(df, height, length)
                
                if product is not None:
                    art = str(product['–ê—Ä—Ç–∏–∫—É–ª'])
                    key = (sheet_name, art)
                    
                    current_val = st.session_state.entry_values.get(key, "")
                    
                    # –ü–æ–ª–µ –≤–≤–æ–¥–∞ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
                    new_val = st.text_input(
                        "",
                        value=current_val,
                        key=f"matrix_{length}_{height}_{i}_{j}",
                        label_visibility="collapsed",
                        placeholder="0"
                    )
                    
                    # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤–≤–æ–¥–∞
                    if new_val and not all(c in '0123456789+' for c in new_val):
                        st.error("‚ùå –¢–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –∏ +")
                        new_val = current_val
                    
                    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
                    if new_val != current_val:
                        st.session_state.entry_values[key] = new_val
                        quantity = parse_quantity(new_val)
                        if quantity > 0:
                            total_filled += 1
                            total_quantity += quantity
                    
                    # –ü–æ–¥—Å–∫–∞–∑–∫–∞ –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
                    if st.session_state.show_tooltips and product is not None:
                        power = product.get('–ú–æ—â–Ω–æ—Å—Ç—å, –í—Ç', 'N/A')
                        weight = product.get('–í–µ—Å, –∫–≥', 'N/A')
                        volume = product.get('–û–±—ä–µ–º, –º3', 'N/A')
                        price = product.get('–¶–µ–Ω–∞, —Ä—É–±', 'N/A')
                        
                        # –°–æ–∑–¥–∞–µ–º –≤—Å–ø–ª—ã–≤–∞—é—â—É—é –ø–æ–¥—Å–∫–∞–∑–∫—É
                        with st.popover("‚ÑπÔ∏è", use_container_width=True):
                            st.markdown(f"**{product.get('–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ', 'N/A')}**")
                            st.markdown("---")
                            st.markdown(f"**–ê—Ä—Ç–∏–∫—É–ª:** {art}")
                            st.markdown(f"**–ú–æ—â–Ω–æ—Å—Ç—å:** {power} –í—Ç")
                            st.markdown(f"**–í–µ—Å:** {weight} –∫–≥")
                            st.markdown(f"**–û–±—ä–µ–º:** {volume} –º¬≥")
                            st.markdown(f"**–¶–µ–Ω–∞:** {price} ‚ÇΩ")
                            
                            if new_val and parse_quantity(new_val) > 0:
                                qty = parse_quantity(new_val)
                                st.markdown(f"**–í—ã–±—Ä–∞–Ω–æ:** {qty} —à—Ç")
                                st.markdown(f"**–°—É–º–º–∞:** {qty * float(price or 0):.2f} ‚ÇΩ")
                
                else:
                    # –ï—Å–ª–∏ —Ä–∞–¥–∏–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                    st.markdown("‚Äî")
                    if st.session_state.show_tooltips:
                        st.markdown("", help="–†–∞–¥–∏–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏—è
    st.markdown("---")
    
    if total_filled > 0:
        st.success(f"‚úÖ –ó–∞–ø–æ–ª–Ω–µ–Ω–æ —è—á–µ–µ–∫: {total_filled} | –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {total_quantity} —à—Ç")
        
        col1, col2 = st.columns(2)
        with col1:
            if st.button("üìã –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—é", type="primary", use_container_width=True):
                st.switch_page("pages/02_üìã_–°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è.py")
        with col2:
            if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", use_container_width=True):
                st.rerun()
    else:
        st.info("üí° –ó–∞–ø–æ–ª–Ω–∏—Ç–µ —è—á–µ–π–∫–∏ –º–∞—Ç—Ä–∏—Ü—ã –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏")
        
        # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è
        with st.expander("üìù –ö–∞–∫ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –º–∞—Ç—Ä–∏—Ü–µ–π?"):
            st.markdown("""
            1. **–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã** –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏
            2. **–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –º–∞—Ç—Ä–∏—Ü—É** - –≤–≤–æ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤ —è—á–µ–π–∫–∏
            3. **–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ +** –¥–ª—è —Å—É–º–º–∏—Ä–æ–≤–∞–Ω–∏—è: `1+2+3`
            4. **–ü–µ—Ä–µ–π–¥–∏—Ç–µ –∫ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏** –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            """)

if __name__ == "__main__":
    main()