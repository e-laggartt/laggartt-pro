# pages/02_üìã_–°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è.py
import streamlit as st
import pandas as pd
from pathlib import Path

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
@st.cache_data
def load_data():
    matrix_path = Path("data/–ú–∞—Ç—Ä–∏—Ü–∞.xlsx")
    brackets_path = Path("data/–ö—Ä–æ–Ω—à—Ç–µ–π–Ω—ã.xlsx")
    sheets = pd.read_excel(matrix_path, sheet_name=None, engine="openpyxl")
    brackets_df = pd.read_excel(brackets_path, engine="openpyxl")
    return sheets, brackets_df

sheets, brackets_df = load_data()

# –§—É–Ω–∫—Ü–∏–∏ —Ä–∞—Å—á–µ—Ç–∞
def parse_quantity(val):
    if not val: return 0
    try:
        if isinstance(val, (int, float)): return int(round(float(val)))
        val = str(val).strip().strip('+')
        if not val: return 0
        return sum(int(round(float(part))) for part in val.split('+') if part.strip())
    except:
        return 0

def calculate_brackets(radiator_type, length, height, bracket_type, qty=1):
    brackets = []
    if bracket_type == "–ù–∞—Å—Ç–µ–Ω–Ω—ã–µ –∫—Ä–æ–Ω—à—Ç–µ–π–Ω—ã":
        if radiator_type in ["10", "11"]:
            brackets.extend([("–ö9.2L", 2*qty), ("–ö9.2R", 2*qty)])
            if 1700 <= length <= 2000: brackets.append(("–ö9.3-40", 1*qty))
        elif radiator_type in ["20", "21", "22", "30", "33"]:
            art_map = {300: "–ö15.4300", 400: "–ö15.4400", 500: "–ö15.4500", 600: "–ö15.4600", 900: "–ö15.4900"}
            if height in art_map:
                art = art_map[height]
                qty_br = 2*qty if 400 <= length <= 1600 else (3*qty if 1700 <= length <= 2000 else 0)
                if qty_br: brackets.append((art, qty_br))
    elif bracket_type == "–ù–∞–ø–æ–ª—å–Ω—ã–µ –∫—Ä–æ–Ω—à—Ç–µ–π–Ω—ã":
        if radiator_type in ["10", "11"]:
            art_map = {300: "–ö–ù–°450", 400: "–ö–ù–°450", 500: "–ö–ù–°470", 600: "–ö–ù–°470", 900: "–ö–ù–°4100"}
            main_art = art_map.get(height)
            if main_art:
                brackets.append((main_art, 2*qty))
                if 1700 <= length <= 2000: brackets.append(("–ö–ù–°430", 1*qty))
        elif radiator_type == "21":
            art_map = {300: "–ö–ù–°650", 400: "–ö–ù–°650", 500: "–ö–ù–°670", 600: "–ö–ù–°670", 900: "–ö–ù–°6100"}
            art = art_map.get(height)
            if art:
                if 400 <= length <= 1000: qty_br = 2*qty
                elif 1100 <= length <= 1600: qty_br = 3*qty
                elif 1700 <= length <= 2000: qty_br = 4*qty
                else: qty_br = 0
                if qty_br: brackets.append((art, qty_br))
        elif radiator_type in ["20", "22", "30", "33"]:
            art_map = {300: "–ö–ù–°550", 400: "–ö–ù–°550", 500: "–ö–ù–°570", 600: "–ö–ù–°570", 900: "–ö–ù–°5100"}
            art = art_map.get(height)
            if art:
                if 400 <= length <= 1000: qty_br = 2*qty
                elif 1100 <= length <= 1600: qty_br = 3*qty
                elif 1700 <= length <= 2000: qty_br = 4*qty
                else: qty_br = 0
                if qty_br: brackets.append((art, qty_br))
    return brackets

# –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏
def prepare_spec():
    spec_data = []
    bracket_temp = {}
    for (sheet_name, art), raw_val in st.session_state.entry_values.items():
        if not raw_val or sheet_name not in sheets:
            continue
        qty = parse_quantity(raw_val)
        if qty <= 0:
            continue
        df = sheets[sheet_name]
        product = df[df['–ê—Ä—Ç–∏–∫—É–ª'] == art]
        if product.empty:
            continue
        product = product.iloc[0]
        rad_type = sheet_name.split()[-1]
        price = float(product['–¶–µ–Ω–∞, —Ä—É–±'])
        disc = st.session_state.radiator_discount
        disc_price = round(price * (1 - disc / 100), 2)
        total = round(disc_price * qty, 2)
        name_parts = str(product['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ']).split('/')
        height = int(name_parts[-2].replace('–º–º', '').strip())
        length = int(name_parts[-1].replace('–º–º', '').strip().split()[0])
        conn_type = "VK" if "VK" in sheet_name else "K"
        spec_data.append({
            "‚Ññ": len(spec_data) + 1,
            "–ê—Ä—Ç–∏–∫—É–ª": str(product['–ê—Ä—Ç–∏–∫—É–ª']),
            "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ": str(product['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ']),
            "–ú–æ—â–Ω–æ—Å—Ç—å, –í—Ç": float(product.get('–ú–æ—â–Ω–æ—Å—Ç—å, –í—Ç', 0)),
            "–¶–µ–Ω–∞, —Ä—É–± (—Å –ù–î–°)": price,
            "–°–∫–∏–¥–∫–∞, %": disc,
            "–¶–µ–Ω–∞ —Å–æ —Å–∫–∏–¥–∫–æ–π, —Ä—É–± (—Å –ù–î–°)": disc_price,
            "–ö–æ–ª-–≤–æ": qty,
            "–°—É–º–º–∞, —Ä—É–± (—Å –ù–î–°)": total,
            "ConnectionType": conn_type,
            "RadiatorType": int(rad_type),
            "Height": height,
            "Length": length
        })
        if st.session_state.bracket_type != "–ë–µ–∑ –∫—Ä–æ–Ω—à—Ç–µ–π–Ω–æ–≤":
            brackets = calculate_brackets(rad_type, length, height, st.session_state.bracket_type, qty)
            for art_b, qty_b in brackets:
                b_info = brackets_df[brackets_df['–ê—Ä—Ç–∏–∫—É–ª'] == art_b]
                if b_info.empty:
                    continue
                key = art_b.strip()
                if key not in bracket_temp:
                    bracket_temp[key] = {
                        "–ê—Ä—Ç–∏–∫—É–ª": art_b,
                        "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ": str(b_info.iloc[0]['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ']),
                        "–¶–µ–Ω–∞, —Ä—É–± (—Å –ù–î–°)": float(b_info.iloc[0]['–¶–µ–Ω–∞, —Ä—É–±']),
                        "–ö–æ–ª-–≤–æ": 0,
                        "–°—É–º–º–∞, —Ä—É–± (—Å –ù–î–°)": 0.0
                    }
                b_price = float(b_info.iloc[0]['–¶–µ–Ω–∞, —Ä—É–±'])
                b_disc = st.session_state.bracket_discount
                b_disc_price = round(b_price * (1 - b_disc / 100), 2)
                bracket_temp[key]["–ö–æ–ª-–≤–æ"] += qty_b
                bracket_temp[key]["–°—É–º–º–∞, —Ä—É–± (—Å –ù–î–°)"] += round(b_disc_price * qty_b, 2)
    spec_data.sort(key=lambda x: (0 if x["ConnectionType"] == "VK" else 1, x["RadiatorType"], x["Height"], x["Length"]))
    for i, item in enumerate(spec_data, 1):
        item["‚Ññ"] = i
    bracket_list = []
    for b in bracket_temp.values():
        b_disc = st.session_state.bracket_discount
        b_price = b["–¶–µ–Ω–∞, —Ä—É–± (—Å –ù–î–°)"]
        b_disc_price = round(b_price * (1 - b_disc / 100), 2)
        bracket_list.append({
            "‚Ññ": len(spec_data) + len(bracket_list) + 1,
            "–ê—Ä—Ç–∏–∫—É–ª": b["–ê—Ä—Ç–∏–∫—É–ª"],
            "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ": b["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ"],
            "–ú–æ—â–Ω–æ—Å—Ç—å, –í—Ç": 0.0,
            "–¶–µ–Ω–∞, —Ä—É–± (—Å –ù–î–°)": b_price,
            "–°–∫–∏–¥–∫–∞, %": b_disc,
            "–¶–µ–Ω–∞ —Å–æ —Å–∫–∏–¥–∫–æ–π, —Ä—É–± (—Å –ù–î–°)": b_disc_price,
            "–ö–æ–ª-–≤–æ": b["–ö–æ–ª-–≤–æ"],
            "–°—É–º–º–∞, —Ä—É–± (—Å –ù–î–°)": b["–°—É–º–º–∞, —Ä—É–± (—Å –ù–î–°)"],
            "ConnectionType": "Bracket"
        })
    return pd.DataFrame(spec_data + bracket_list)

# –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å
st.title("üìã –°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è")

if not st.session_state.entry_values:
    st.info("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –º–∞—Ç—Ä–∏—Ü—É –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ '–ì–ª–∞–≤–Ω–∞—è', —á—Ç–æ–±—ã —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—é.")
else:
    df = prepare_spec()
    if df.empty:
        st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
    else:
        st.dataframe(df, use_container_width=True)
        total_sum = df["–°—É–º–º–∞, —Ä—É–± (—Å –ù–î–°)"].sum()
        total_power = df[df["–ú–æ—â–Ω–æ—Å—Ç—å, –í—Ç"] > 0]["–ú–æ—â–Ω–æ—Å—Ç—å, –í—Ç"].sum()
        st.markdown(f"**–°—É–º–º–∞—Ä–Ω–∞—è –º–æ—â–Ω–æ—Å—Ç—å:** {total_power:.2f} –í—Ç")
        st.markdown(f"**–°—É–º–º–∞ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏:** {total_sum:.2f} —Ä—É–±")