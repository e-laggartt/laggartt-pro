# pages/02_üìã_–°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è.py
import streamlit as st
import pandas as pd

st.set_page_config(
    page_title="–°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è - RadiaTool Pro", 
    page_icon="üìã",
    layout="wide"
)

def main():
    st.title("üìã –°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è")
    st.markdown("---")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ session_state
    if 'entry_values' not in st.session_state or not st.session_state.entry_values:
        st.warning("‚ùå –ú–∞—Ç—Ä–∏—Ü–∞ —Ä–∞–¥–∏–∞—Ç–æ—Ä–æ–≤ –ø—É—Å—Ç–∞. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ.")
        if st.button("‚û°Ô∏è –ü–µ—Ä–µ–π—Ç–∏ –∫ –º–∞—Ç—Ä–∏—Ü–µ"):
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å –∫ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            st.switch_page("pages/–ì–ª–∞–≤–Ω–∞—è.py")
        return
    
    # –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ-—Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—é –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    spec_data = create_demo_specification()
    
    if spec_data.empty:
        st.warning("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏.")
        return
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏
    st.subheader("–¢–µ–∫—É—â–∞—è —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è")
    
    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–∞—è —Ç–∞–±–ª–∏—Ü–∞
    edited_df = st.data_editor(
        spec_data,
        use_container_width=True,
        hide_index=True,
        column_config={
            "–ê—Ä—Ç–∏–∫—É–ª": st.column_config.TextColumn(width="medium"),
            "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ": st.column_config.TextColumn(width="large"),
            "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ": st.column_config.NumberColumn(width="small", min_value=0),
            "–¶–µ–Ω–∞": st.column_config.NumberColumn(format="%.2f ‚ÇΩ"),
            "–°—É–º–º–∞": st.column_config.NumberColumn(format="%.2f ‚ÇΩ"),
            "–¢–∏–ø": st.column_config.SelectboxColumn(
                options=["–†–∞–¥–∏–∞—Ç–æ—Ä", "–ö—Ä–æ–Ω—à—Ç–µ–π–Ω"],
                width="small"
            )
        },
        disabled=["–ê—Ä—Ç–∏–∫—É–ª", "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ"]
    )
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    if not edited_df.equals(spec_data):
        st.session_state.spec_data = edited_df
        st.success("‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
    
    # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    st.markdown("---")
    st.subheader("üöÄ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–µ–π")
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", use_container_width=True):
            st.rerun()
    
    with col2:
        if st.button("üì• Excel", use_container_width=True):
            export_specification_to_excel(edited_df)
    
    with col3:
        if st.button("üìÑ CSV", use_container_width=True):
            export_specification_to_csv(edited_df)
    
    with col4:
        if st.button("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å", type="secondary", use_container_width=True):
            st.session_state.entry_values = {}
            st.session_state.spec_data = pd.DataFrame()
            st.rerun()
    
    # –ò—Ç–æ–≥–∏
    st.markdown("---")
    show_totals(edited_df)
    
    # –ë—ã—Å—Ç—Ä–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ
    st.markdown("---")
    show_quick_copy(edited_df)

def create_demo_specification():
    """–°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–º–æ-—Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    spec_rows = []
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –º–∞—Ç—Ä–∏—Ü—ã
    if 'entry_values' in st.session_state:
        for key, value in st.session_state.entry_values.items():
            if value:  # –ï—Å–ª–∏ –µ—Å—Ç—å –∑–Ω–∞—á–µ–Ω–∏–µ
                sheet_name, art = key
                quantity = parse_quantity(value)
                
                if quantity > 0:
                    # –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ-–¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–∞–¥–∏–∞—Ç–æ—Ä–∞
                    spec_rows.append({
                        "–ê—Ä—Ç–∏–∫—É–ª": art,
                        "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ": f"–†–∞–¥–∏–∞—Ç–æ—Ä {sheet_name}",
                        "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ": quantity,
                        "–¶–µ–Ω–∞": 15000.0,
                        "–°—É–º–º–∞": quantity * 15000.0,
                        "–¢–∏–ø": "–†–∞–¥–∏–∞—Ç–æ—Ä"
                    })
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–µ–º–æ-–∫—Ä–æ–Ω—à—Ç–µ–π–Ω—ã –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω —Ç–∏–ø —Å –∫—Ä–æ–Ω—à—Ç–µ–π–Ω–∞–º–∏
    if st.session_state.get('bracket_type', '–ë–µ–∑ –∫—Ä–æ–Ω—à—Ç–µ–π–Ω–æ–≤') != "–ë–µ–∑ –∫—Ä–æ–Ω—à—Ç–µ–π–Ω–æ–≤":
        spec_rows.append({
            "–ê—Ä—Ç–∏–∫—É–ª": "–ö9.2L",
            "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ": "–ö—Ä–æ–Ω—à—Ç–µ–π–Ω –Ω–∞—Å—Ç–µ–Ω–Ω—ã–π –ª–µ–≤—ã–π",
            "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ": 2,
            "–¶–µ–Ω–∞": 500.0,
            "–°—É–º–º–∞": 1000.0,
            "–¢–∏–ø": "–ö—Ä–æ–Ω—à—Ç–µ–π–Ω"
        })
        spec_rows.append({
            "–ê—Ä—Ç–∏–∫—É–ª": "–ö9.2R", 
            "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ": "–ö—Ä–æ–Ω—à—Ç–µ–π–Ω –Ω–∞—Å—Ç–µ–Ω–Ω—ã–π –ø—Ä–∞–≤—ã–π",
            "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ": 2,
            "–¶–µ–Ω–∞": 500.0,
            "–°—É–º–º–∞": 1000.0,
            "–¢–∏–ø": "–ö—Ä–æ–Ω—à—Ç–µ–π–Ω"
        })
    
    return pd.DataFrame(spec_rows)

def parse_quantity(value):
    """–ü–∞—Ä—Å–∏–Ω–≥ –∫–æ–ª–∏—á–µ—Å—Ç–≤ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ñ–æ—Ä–º—É–ª"""
    if not value:
        return 0
    
    value = str(value).strip()
    
    # –£–¥–∞–ª–µ–Ω–∏–µ –ª–∏—à–Ω–∏—Ö +
    while value.startswith('+'):
        value = value[1:]
    while value.endswith('+'):
        value = value[:-1]
        
    if not value:
        return 0
    
    # –°—É–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∞—Å—Ç–µ–π
    try:
        parts = value.split('+')
        total = sum(int(round(float(part))) for part in parts if part.strip())
        return total
    except (ValueError, TypeError):
        return 0

def show_totals(df):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤"""
    if df.empty:
        return
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –∏—Ç–æ–≥–∏
    total_qty = df['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'].sum()
    total_sum = df['–°—É–º–º–∞'].sum()
    
    # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ —Ä–∞–¥–∏–∞—Ç–æ—Ä—ã –∏ –∫—Ä–æ–Ω—à—Ç–µ–π–Ω—ã
    rad_df = df[df['–¢–∏–ø'] == '–†–∞–¥–∏–∞—Ç–æ—Ä']
    br_df = df[df['–¢–∏–ø'] == '–ö—Ä–æ–Ω—à—Ç–µ–π–Ω']
    
    rad_qty = rad_df['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'].sum()
    rad_sum = rad_df['–°—É–º–º–∞'].sum()
    br_qty = br_df['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'].sum() 
    br_sum = br_df['–°—É–º–º–∞'].sum()
    
    # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å–∫–∏–¥–æ–∫
    discounts = st.session_state.get('discounts', {"radiators": 0, "brackets": 0})
    rad_discounted = rad_sum * (1 - discounts['radiators'] / 100)
    br_discounted = br_sum * (1 - discounts['brackets'] / 100)
    total_discounted = rad_discounted + br_discounted
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤
    st.subheader("üìä –ò—Ç–æ–≥–∏")
    
    # –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –∏—Ç–æ–≥–∏
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric("–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ", f"{total_qty:.0f} —à—Ç")
        st.metric("–†–∞–¥–∏–∞—Ç–æ—Ä—ã", f"{rad_qty:.0f} —à—Ç")
        st.metric("–ö—Ä–æ–Ω—à—Ç–µ–π–Ω—ã", f"{br_qty:.0f} —à—Ç")
    
    with col2:
        st.metric("–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å", f"{total_sum:,.2f} ‚ÇΩ")
        st.metric("–°—Ç–æ–∏–º–æ—Å—Ç—å —Ä–∞–¥–∏–∞—Ç–æ—Ä–æ–≤", f"{rad_sum:,.2f} ‚ÇΩ")
        st.metric("–°—Ç–æ–∏–º–æ—Å—Ç—å –∫—Ä–æ–Ω—à—Ç–µ–π–Ω–æ–≤", f"{br_sum:,.2f} ‚ÇΩ")
    
    with col3:
        st.metric("–°–∫–∏–¥–∫–∞ —Ä–∞–¥–∏–∞—Ç–æ—Ä—ã", f"-{discounts['radiators']}%")
        st.metric("–°–∫–∏–¥–∫–∞ –∫—Ä–æ–Ω—à—Ç–µ–π–Ω—ã", f"-{discounts['brackets']}%")
        st.metric("–ò—Ç–æ–≥–æ —Å–æ —Å–∫–∏–¥–∫–æ–π", f"{total_discounted:,.2f} ‚ÇΩ")
    
    with col4:
        st.metric("–ü–æ–∑–∏—Ü–∏–π –≤ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏", len(df))
        st.metric("–°—Ä–µ–¥–Ω—è—è —Ü–µ–Ω–∞", f"{total_sum/total_qty:,.2f} ‚ÇΩ" if total_qty > 0 else "0 ‚ÇΩ")

def show_quick_copy(df):
    """–ë—ã—Å—Ç—Ä–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –±—É—Ñ–µ—Ä"""
    st.subheader("üìã –ë—ã—Å—Ç—Ä–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ")
    
    col1, col2 = st.columns(2)
    
    with col1:
        if st.button("üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∞—Ä—Ç–∏–∫—É–ª—ã", use_container_width=True):
            articles = "\n".join(df['–ê—Ä—Ç–∏–∫—É–ª'].astype(str))
            st.session_state.copied_articles = articles
            st.success("‚úÖ –ê—Ä—Ç–∏–∫—É–ª—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã –≤ –±—É—Ñ–µ—Ä!")
    
    with col2:
        if st.button("üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞", use_container_width=True):
            quantities = "\n".join(df['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'].astype(str))
            st.session_state.copied_quantities = quantities
            st.success("‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã –≤ –±—É—Ñ–µ—Ä!")
    
    # –ü–æ–∫–∞–∑–∞—Ç—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    if 'copied_articles' in st.session_state:
        with st.expander("üìã –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∞—Ä—Ç–∏–∫—É–ª—ã"):
            st.text_area("–ê—Ä—Ç–∏–∫—É–ª—ã", st.session_state.copied_articles, height=150, key="articles_area")
    
    if 'copied_quantities' in st.session_state:
        with st.expander("üìã –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞"):
            st.text_area("–ö–æ–ª–∏—á–µ—Å—Ç–≤–∞", st.session_state.copied_quantities, height=150, key="quantities_area")

def export_specification_to_excel(df):
    """–≠–∫—Å–ø–æ—Ä—Ç —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤ Excel"""
    try:
        from io import BytesIO
        
        output = BytesIO()
        
        with pd.ExcelWriter(output, engine='openpyxl') as writer:
            df.to_excel(writer, sheet_name='–°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è', index=False)
            
            # –ê–≤—Ç–æ–ø–æ–¥–±–æ—Ä —à–∏—Ä–∏–Ω—ã —Å—Ç–æ–ª–±—Ü–æ–≤
            workbook = writer.book
            worksheet = writer.sheets['–°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è']
            
            for column in worksheet.columns:
                max_length = 0
                column_letter = column[0].column_letter
                for cell in column:
                    try:
                        if len(str(cell.value)) > max_length:
                            max_length = len(str(cell.value))
                    except:
                        pass
                adjusted_width = min(max_length + 2, 50)
                worksheet.column_dimensions[column_letter].width = adjusted_width
        
        st.success("‚úÖ –§–∞–π–ª –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è")
        st.download_button(
            label="üì• –°–∫–∞—á–∞—Ç—å Excel —Ñ–∞–π–ª",
            data=output.getvalue(),
            file_name=f"—Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è_{pd.Timestamp.now().strftime('%Y%m%d_%H%M')}.xlsx",
            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
            key="excel_download"
        )
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ Excel: {e}")

def export_specification_to_csv(df):
    """–≠–∫—Å–ø–æ—Ä—Ç —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤ CSV"""
    try:
        # CSV —Å —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–µ–º —Ç–æ—á–∫–∞ —Å –∑–∞–ø—è—Ç–æ–π –∏ –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π UTF-8-sig
        output = df.to_csv(index=False, sep=';', encoding='utf-8-sig')
        
        st.success("‚úÖ CSV —Ñ–∞–π–ª –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è")
        st.download_button(
            label="üì• –°–∫–∞—á–∞—Ç—å CSV —Ñ–∞–π–ª",
            data=output.encode('utf-8-sig'),
            file_name=f"—Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è_{pd.Timestamp.now().strftime('%Y%m%d_%H%M')}.csv",
            mime="text/csv",
            key="csv_download"
        )
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ CSV: {e}")

if __name__ == "__main__":
    main()