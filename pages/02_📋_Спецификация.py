# pages/02_üìã_–°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è.py
import streamlit as st
import pandas as pd
from pathlib import Path
import numpy as np

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
@st.cache_data
def load_data():
    matrix_path = Path("data/–ú–∞—Ç—Ä–∏—Ü–∞.xlsx")
    brackets_path = Path("data/–ö—Ä–æ–Ω—à—Ç–µ–π–Ω—ã.xlsx")
    sheets = pd.read_excel(matrix_path, sheet_name=None, engine="openpyxl")
    brackets_df = pd.read_excel(brackets_path, engine="openpyxl")
    return sheets, brackets_df

sheets, brackets_df = load_data()

# –§—É–Ω–∫—Ü–∏–∏ –∏–∑ tkinter –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
def parse_quantity(value):
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–¥–∏–∞—Ç–æ—Ä–æ–≤.
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞, —á–∏—Å–ª–∞ —Å –ø–ª–∞–≤–∞—é—â–µ–π —Ç–æ—á–∫–æ–π –∏ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ —Å –ø–ª—é—Å–∞–º–∏.
    """
    try:
        if isinstance(value, str) and value.strip() in ["–ö–æ–ª-–≤–æ", "‚Ññ"]:
            return 0
            
        if not value:
            return 0
        
        if isinstance(value, (int, float)):
            return int(round(float(value)))
    
        value = str(value).strip()
        
        # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –∑–Ω–∞–∫–∏ '+' –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ
        while value.startswith('+'):
            value = value[1:]
        while value.endswith('+'):
            value = value[:-1]
        
        if not value:
            return 0
        
        parts = value.split('+')
        total = 0
        for part in parts:
            part = part.strip()
            if part:
                total += int(round(float(part)))
                
        return total
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞: {str(e)}")
        return 0

def calculate_brackets(radiator_type, length, height, bracket_type, qty_radiator=1):
    """
    –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫—Ä–æ–Ω—à—Ç–µ–π–Ω—ã –¥–ª—è —Ä–∞–¥–∏–∞—Ç–æ—Ä–∞
    
    –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        radiator_type (str): –¢–∏–ø —Ä–∞–¥–∏–∞—Ç–æ—Ä–∞ ("10", "11", "20" –∏ —Ç.–¥.)
        length (int): –î–ª–∏–Ω–∞ —Ä–∞–¥–∏–∞—Ç–æ—Ä–∞ –≤ –º–º (400-2000)
        height (int): –í—ã—Å–æ—Ç–∞ —Ä–∞–¥–∏–∞—Ç–æ—Ä–∞ –≤ –º–º (300,400,500,600,900)
        bracket_type (str): –¢–∏–ø –∫—Ä–µ–ø–ª–µ–Ω–∏—è
        qty_radiator (int): –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∞–¥–∏–∞—Ç–æ—Ä–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1)
    
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        list: –°–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π (–∞—Ä—Ç–∏–∫—É–ª, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ)
    """
    brackets = []
    
    # –ù–∞—Å—Ç–µ–Ω–Ω—ã–µ –∫—Ä–æ–Ω—à—Ç–µ–π–Ω—ã
    if bracket_type == "–ù–∞—Å—Ç–µ–Ω–Ω—ã–µ –∫—Ä–æ–Ω—à—Ç–µ–π–Ω—ã":
        if radiator_type in ["10", "11"]:
            brackets.extend([
                ("–ö9.2L", 2 * qty_radiator),
                ("–ö9.2R", 2 * qty_radiator)
            ])
            if 1700 <= length <= 2000:
                brackets.append(("–ö9.3-40", 1 * qty_radiator))
        
        elif radiator_type in ["20", "21", "22", "30", "33"]:
            art_map = {
                300: "–ö15.4300",
                400: "–ö15.4400", 
                500: "–ö15.4500",
                600: "–ö15.4600",
                900: "–ö15.4900"
            }
            if height in art_map:
                art = art_map[height]
                if 400 <= length <= 1600:
                    qty = 2 * qty_radiator
                elif 1700 <= length <= 2000:
                    qty = 3 * qty_radiator
                else:
                    qty = 0
                if qty > 0:
                    brackets.append((art, qty))
    
    # –ù–∞–ø–æ–ª—å–Ω—ã–µ –∫—Ä–æ–Ω—à—Ç–µ–π–Ω—ã
    elif bracket_type == "–ù–∞–ø–æ–ª—å–Ω—ã–µ –∫—Ä–æ–Ω—à—Ç–µ–π–Ω—ã":
        if radiator_type in ["10", "11"]:
            if 300 <= height <= 400:
                main_art = "–ö–ù–°450"
            elif 500 <= height <= 600:
                main_art = "–ö–ù–°470" 
            elif height == 900:
                main_art = "–ö–ù–°4100"
            else:
                main_art = None
            
            if main_art:
                brackets.append((main_art, 2 * qty_radiator))
                if 1700 <= length <= 2000:
                    brackets.append(("–ö–ù–°430", 1 * qty_radiator))
        
        elif radiator_type == "21":
            if 300 <= height <= 400:
                art = "–ö–ù–°650"
            elif 500 <= height <= 600:
                art = "–ö–ù–°670"
            elif height == 900:
                art = "–ö–ù–°6100"
            else:
                art = None
            
            if art:
                if 400 <= length <= 1000:
                    qty = 2 * qty_radiator
                elif 1100 <= length <= 1600:
                    qty = 3 * qty_radiator
                elif 1700 <= length <= 2000:
                    qty = 4 * qty_radiator
                else:
                    qty = 0
                if qty > 0:
                    brackets.append((art, qty))
        
        elif radiator_type in ["20", "22", "30", "33"]:
            if 300 <= height <= 400:
                art = "–ö–ù–°550"
            elif 500 <= height <= 600:
                art = "–ö–ù–°570"
            elif height == 900:
                art = "–ö–ù–°5100"
            else:
                art = None
            
            if art:
                if 400 <= length <= 1000:
                    qty = 2 * qty_radiator
                elif 1100 <= length <= 1600:
                    qty = 3 * qty_radiator
                elif 1700 <= length <= 2000:
                    qty = 4 * qty_radiator
                else:
                    qty = 0
                if qty > 0:
                    brackets.append((art, qty))
    
    return brackets

def calculate_total_power(spec_data):
    """–†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å—É–º–º–∞—Ä–Ω—É—é –º–æ—â–Ω–æ—Å—Ç—å (–í—Ç) —Å —É—á–µ—Ç–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞"""
    total_power = 0.0
    
    for index, row in spec_data.iterrows():
        # –ü—Ä–æ–ø—É—Å–∫ –∏—Ç–æ–≥–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏
        if row["‚Ññ"] == "–ò—Ç–æ–≥–æ":
            continue
            
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π –∏–∑ —Å—Ç—Ä–æ–∫–∏
        power_str = str(row["–ú–æ—â–Ω–æ—Å—Ç—å, –í—Ç"]).strip()
        qty = row["–ö–æ–ª-–≤–æ"]
        
        try:
            # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –º–æ—â–Ω–æ—Å—Ç–∏ –≤ —á–∏—Å–ª–æ
            power = float(power_str) if power_str not in ['', 'nan', 'None'] else 0.0
            
            # –†–∞—Å—á–µ—Ç –∏ —Å—É–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ
            if power >= 0 and qty >= 0:
                total_power += power * qty
            else:
                print(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Å—Ç—Ä–æ–∫–µ {index}: –º–æ—â–Ω–æ—Å—Ç—å={power}, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ={qty}")
                
        except ValueError:
            print(f"–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –º–æ—â–Ω–æ—Å—Ç–∏ –≤ —Å—Ç—Ä–æ–∫–µ {index}: '{power_str}'")
        except TypeError:
            print(f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö –≤ —Å—Ç—Ä–æ–∫–µ {index}")
    
    return round(total_power, 2)  # –û–∫—Ä—É–≥–ª–µ–Ω–∏–µ –¥–æ 2 –∑–Ω–∞–∫–æ–≤

def calculate_total_weight_and_volume(spec_data, sheets):
    """
    –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç –æ–±—â–∏–π –≤–µ—Å –∏ –æ–±—ä–µ–º —Ä–∞–¥–∏–∞—Ç–æ—Ä–æ–≤ (–±–µ–∑ —É—á–µ—Ç–∞ –∫—Ä–æ–Ω—à—Ç–µ–π–Ω–æ–≤)
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        total_weight (float): –°—É–º–º–∞—Ä–Ω—ã–π –≤–µ—Å –≤ –∫–≥
        total_volume (float): –°—É–º–º–∞—Ä–Ω—ã–π –æ–±—ä–µ–º –≤ –º¬≥
    """
    total_weight = 0.0
    total_volume = 0.0
    
    # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ –≤ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏
    for index, row in spec_data.iterrows():
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ç—Ä–æ–∫—É "–ò—Ç–æ–≥–æ" –∏ –∫—Ä–æ–Ω—à—Ç–µ–π–Ω—ã
        if row["‚Ññ"] == "–ò—Ç–æ–≥–æ" or "–ö—Ä–æ–Ω—à—Ç–µ–π–Ω" in str(row["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ"]):
            continue
        
        # –ü–æ–ª—É—á–∞–µ–º –∞—Ä—Ç–∏–∫—É–ª –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
        art = str(row["–ê—Ä—Ç–∏–∫—É–ª"]).strip()
        qty = int(row["–ö–æ–ª-–≤–æ"])
        
        # –ò—â–µ–º —Ä–∞–¥–∏–∞—Ç–æ—Ä –≤ –¥–∞–Ω–Ω—ã—Ö
        for sheet_name, data in sheets.items():
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞—Ä—Ç–∏–∫—É–ª–∞ –≤ —Ç–µ–∫—É—â–µ–º –ª–∏—Å—Ç–µ
            product = data[data["–ê—Ä—Ç–∏–∫—É–ª"].str.strip() == art]
            if not product.empty:
                # –°—É–º–º–∏—Ä—É–µ–º –≤–µ—Å –∏ –æ–±—ä–µ–º
                total_weight += float(product.iloc[0]["–í–µ—Å, –∫–≥"]) * qty
                total_volume += float(product.iloc[0]["–û–±—ä–µ–º, –º3"]) * qty
                break  # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –ø–æ–∏—Å–∫ –ø–æ—Å–ª–µ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è
    
    # –û–∫—Ä—É–≥–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∫–∞–∫ –≤ –æ–±—Ä–∞–∑—Ü–µ
    return round(total_weight, 1), round(total_volume, 3)

def format_power(power_w):
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –º–æ—â–Ω–æ—Å—Ç—å —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –≤—ã–±–æ—Ä–æ–º –µ–¥–∏–Ω–∏—Ü –∏–∑–º–µ—Ä–µ–Ω–∏—è:
    - –ï—Å–ª–∏ –±–æ–ª—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ 1 000 000 –í—Ç -> –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –≤ –ú–í—Ç
    - –ï—Å–ª–∏ –±–æ–ª—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ 1 000 –í—Ç -> –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –≤ –∫–í—Ç
    - –ú–µ–Ω—å—à–µ 1 000 –í—Ç -> –æ—Å—Ç–∞–≤–ª—è–µ—Ç –≤ –í—Ç
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É —Å –µ–¥–∏–Ω–∏—Ü–µ–π –∏–∑–º–µ—Ä–µ–Ω–∏—è.
    """
    try:
        power_w = float(power_w)  # –ù–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–ª–∏ —Å—Ç—Ä–æ–∫—É
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª—è –ú–í—Ç (–æ—Ç 1 000 000 –í—Ç)
        if power_w >= 1_000_000:
            power_value = power_w / 1_000_000
            # –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ 3 –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
            return f"{round(power_value, 3)} –ú–í—Ç"
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª—è –∫–í—Ç (–æ—Ç 1 000 –í—Ç)
        elif power_w >= 1_000:
            power_value = power_w / 1_000
            # –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ 3 –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
            return f"{round(power_value, 3)} –∫–í—Ç"
            
        # –î–ª—è –∑–Ω–∞—á–µ–Ω–∏–π –º–µ–Ω—å—à–µ 1 000 –í—Ç
        else:
            # –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ 2 –∑–Ω–∞–∫–æ–≤ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π
            return f"{round(power_w, 2)} –í—Ç"
            
    except (ValueError, TypeError):
        # –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
        return f"{power_w} –í—Ç"  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å —Å –ø–æ–º–µ—Ç–∫–æ–π –í—Ç

def format_weight(weight_kg):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤–µ—Å —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –≤—ã–±–æ—Ä–æ–º –µ–¥–∏–Ω–∏—Ü –∏–∑–º–µ—Ä–µ–Ω–∏—è"""
    if weight_kg >= 1000:  # –ë–æ–ª–µ–µ 1000 –∫–≥ = 1 —Ç
        return f"{weight_kg / 1000:.3f} —Ç"
    else:
        return f"{weight_kg:.3f} –∫–≥"

def prepare_spec_data(entry_values, sheets, brackets_df, radiator_discount, bracket_discount, bracket_type):
    """–ü–æ–ª–Ω–∞—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫–∞–∫ –≤ tkinter-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏"""
    spec_data = []
    radiator_data = []
    bracket_data = []
    brackets_temp = {}

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ä–∞–¥–∏–∞—Ç–æ—Ä–æ–≤
    for key, value in entry_values.items():
        if value and value != "0":
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º sheet_name –∏ art –∏–∑ –∫–ª—é—á–∞
            parts = key.split('_', 2)
            if len(parts) >= 3:
                sheet_name = f"{parts[0]} {parts[1]}"
                art = parts[2]
                
                if sheet_name in sheets:
                    try:
                        # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ entry_values (–º–æ–∂–µ—Ç –±—ã—Ç—å "1+3")
                        raw_value = value
                        # –í—ã—á–∏—Å–ª—è–µ–º —Å—É–º–º—É —Ç–æ–ª—å–∫–æ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏
                        qty_radiator = parse_quantity(raw_value)
                        mask = sheets[sheet_name]['–ê—Ä—Ç–∏–∫—É–ª'] == art
                        product = sheets[sheet_name].loc[mask]
                        
                        if product.empty:
                            continue
                        
                        product = product.iloc[0]
                        radiator_type = sheet_name.split()[-1]
                        price = float(product['–¶–µ–Ω–∞, —Ä—É–±'])
                        # –ü–æ–ª—É—á–∞–µ–º —Å–∫–∏–¥–∫—É –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
                        discount = float(radiator_discount) if radiator_discount else 0.0
                        discounted_price = round(price * (1 - discount / 100), 2)
                        total = round(discounted_price * qty_radiator, 2)
                        
                        # –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –∏–∑ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è
                        name_parts = product['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ'].split('/')
                        height = int(name_parts[-2].replace('–º–º', '').strip())
                        length = int(name_parts[-1].replace('–º–º', '').strip().split()[0])
                        
                        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –í–∏–¥ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
                        connection_type = "VK" if "VK" in sheet_name else "K"
                        
                        radiator_data.append({
                            "‚Ññ": len(radiator_data) + 1,
                            "–ê—Ä—Ç–∏–∫—É–ª": str(product['–ê—Ä—Ç–∏–∫—É–ª']).strip(),
                            "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ": str(product['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ']),
                            "–ú–æ—â–Ω–æ—Å—Ç—å, –í—Ç": float(product.get('–ú–æ—â–Ω–æ—Å—Ç—å, –í—Ç', 0)),
                            "–¶–µ–Ω–∞, —Ä—É–± (—Å –ù–î–°)": float(price),
                            "–°–∫–∏–¥–∫–∞, %": float(discount),
                            "–¶–µ–Ω–∞ —Å–æ —Å–∫–∏–¥–∫–æ–π, —Ä—É–± (—Å –ù–î–°)": float(discounted_price),
                            "–ö–æ–ª-–≤–æ": int(qty_radiator),
                            "–°—É–º–º–∞, —Ä—É–± (—Å –ù–î–°)": float(total),
                            "ConnectionType": connection_type,  # –î–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ VK/K
                            "RadiatorType": int(radiator_type),  # –¢–∏–ø —Ä–∞–¥–∏–∞—Ç–æ—Ä–∞ (10, 11, 20 –∏ —Ç.–¥.)
                            "Height": height,  # –í—ã—Å–æ—Ç–∞ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
                            "Length": length  # –î–ª–∏–Ω–∞ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
                        })

                        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫—Ä–æ–Ω—à—Ç–µ–π–Ω–æ–≤
                        if bracket_type != "–ë–µ–∑ –∫—Ä–æ–Ω—à—Ç–µ–π–Ω–æ–≤":
                            brackets = calculate_brackets(
                                radiator_type=radiator_type,
                                length=length,
                                height=height,
                                bracket_type=bracket_type,
                                qty_radiator=qty_radiator
                            )
                            
                            for art_bracket, qty_bracket in brackets:
                                mask_bracket = brackets_df['–ê—Ä—Ç–∏–∫—É–ª'] == art_bracket
                                bracket_info = brackets_df.loc[mask_bracket]
                                
                                if bracket_info.empty:
                                    continue
                                    
                                key = art_bracket.strip()
                                if key not in brackets_temp:
                                    brackets_temp[key] = {
                                        "–ê—Ä—Ç–∏–∫—É–ª": art_bracket,
                                        "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ": str(bracket_info.iloc[0]['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ']),
                                        "–¶–µ–Ω–∞, —Ä—É–± (—Å –ù–î–°)": float(bracket_info.iloc[0]['–¶–µ–Ω–∞, —Ä—É–±']),
                                        "–ö–æ–ª-–≤–æ": 0,
                                        "–°—É–º–º–∞, —Ä—É–± (—Å –ù–î–°)": 0.0
                                    }
                                
                                price_bracket = float(bracket_info.iloc[0]['–¶–µ–Ω–∞, —Ä—É–±'])
                                # –ü–æ–ª—É—á–∞–µ–º —Å–∫–∏–¥–∫—É –Ω–∞ –∫—Ä–æ–Ω—à—Ç–µ–π–Ω—ã –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
                                discount_bracket = float(bracket_discount) if bracket_discount else 0.0
                                discounted_price_bracket = round(price_bracket * (1 - discount_bracket / 100), 2)
                                qty_total = qty_bracket
                                
                                brackets_temp[key]["–ö–æ–ª-–≤–æ"] += int(qty_total)
                                brackets_temp[key]["–°—É–º–º–∞, —Ä—É–± (—Å –ù–î–°)"] += round(discounted_price_bracket * qty_total, 2)

                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö —Ä–∞–¥–∏–∞—Ç–æ—Ä–∞: {str(e)}")
                        continue

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∫—Ä–æ–Ω—à—Ç–µ–π–Ω–æ–≤
    if brackets_temp:
        for b in brackets_temp.values():
            bracket_discount_val = float(bracket_discount) if bracket_discount else 0.0
            price_with_discount = round(float(b["–¶–µ–Ω–∞, —Ä—É–± (—Å –ù–î–°)"]) * (1 - bracket_discount_val / 100), 2)
            
            bracket_data.append({
                "‚Ññ": len(radiator_data) + len(bracket_data) + 1,
                "–ê—Ä—Ç–∏–∫—É–ª": str(b["–ê—Ä—Ç–∏–∫—É–ª"]),
                "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ": str(b["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ"]),
                "–ú–æ—â–Ω–æ—Å—Ç—å, –í—Ç": 0.0,
                "–¶–µ–Ω–∞, —Ä—É–± (—Å –ù–î–°)": float(b["–¶–µ–Ω–∞, —Ä—É–± (—Å –ù–î–°)"]),
                "–°–∫–∏–¥–∫–∞, %": float(bracket_discount_val),
                "–¶–µ–Ω–∞ —Å–æ —Å–∫–∏–¥–∫–æ–π, —Ä—É–± (—Å –ù–î–°)": float(price_with_discount),
                "–ö–æ–ª-–≤–æ": int(b["–ö–æ–ª-–≤–æ"]),
                "–°—É–º–º–∞, —Ä—É–± (—Å –ù–î–°)": float(b["–°—É–º–º–∞, —Ä—É–± (—Å –ù–î–°)"]),
                "ConnectionType": "Bracket"  # –î–ª—è –∫—Ä–æ–Ω—à—Ç–µ–π–Ω–æ–≤
            })

    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ —Ä–∞–¥–∏–∞—Ç–æ—Ä–æ–≤: —Å–Ω–∞—á–∞–ª–∞ VK, –ø–æ—Ç–æ–º K, –∑–∞—Ç–µ–º –ø–æ —Ç–∏–ø—É, –≤—ã—Å–æ—Ç–µ, –¥–ª–∏–Ω–µ
    radiator_data_sorted = sorted(
        radiator_data, 
        key=lambda x: (
            0 if x["ConnectionType"] == "VK" else 1,  # –°–Ω–∞—á–∞–ª–∞ VK, –ø–æ—Ç–æ–º K
            x["RadiatorType"],  # –ó–∞—Ç–µ–º –ø–æ —Ç–∏–ø—É —Ä–∞–¥–∏–∞—Ç–æ—Ä–∞ (10, 11, 20...)
            x["Height"],  # –ó–∞—Ç–µ–º –ø–æ –≤—ã—Å–æ—Ç–µ
            x["Length"]  # –ó–∞—Ç–µ–º –ø–æ –¥–ª–∏–Ω–µ
        )
    )
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–æ–º–µ—Ä–∞ –ø–æ—Å–ª–µ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
    for i, item in enumerate(radiator_data_sorted, 1):
        item["‚Ññ"] = i
    
    # –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö (–æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ä–∞–¥–∏–∞—Ç–æ—Ä—ã + –∫—Ä–æ–Ω—à—Ç–µ–π–Ω—ã)
    combined_data = radiator_data_sorted + bracket_data
    
    if not combined_data:
        return pd.DataFrame()

    # –°–æ–∑–¥–∞–Ω–∏–µ DataFrame (—É–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø–æ–ª—è –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏)
    df = pd.DataFrame(
        combined_data,
        columns=[
            "‚Ññ", "–ê—Ä—Ç–∏–∫—É–ª", "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", "–ú–æ—â–Ω–æ—Å—Ç—å, –í—Ç",
            "–¶–µ–Ω–∞, —Ä—É–± (—Å –ù–î–°)", "–°–∫–∏–¥–∫–∞, %",
            "–¶–µ–Ω–∞ —Å–æ —Å–∫–∏–¥–∫–æ–π, —Ä—É–± (—Å –ù–î–°)", "–ö–æ–ª-–≤–æ",
            "–°—É–º–º–∞, —Ä—É–± (—Å –ù–î–°)"
        ]
    )
    
    return df

def add_total_row(spec_data):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç—Ä–æ–∫—É –∫ –¥–∞–Ω–Ω—ã–º —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏"""
    total_sum = spec_data["–°—É–º–º–∞, —Ä—É–± (—Å –ù–î–°)"].sum()
    total_qty_radiators = sum(spec_data[~spec_data["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ"].str.contains("–ö—Ä–æ–Ω—à—Ç–µ–π–Ω", na=False)]["–ö–æ–ª-–≤–æ"])
    total_qty_brackets = sum(spec_data[spec_data["–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ"].str.contains("–ö—Ä–æ–Ω—à—Ç–µ–π–Ω", na=False)]["–ö–æ–ª-–≤–æ"])
    
    total_row = pd.DataFrame([{
        "‚Ññ": "–ò—Ç–æ–≥–æ",
        "–ê—Ä—Ç–∏–∫—É–ª": "",
        "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ": "",
        "–ú–æ—â–Ω–æ—Å—Ç—å, –í—Ç": "",
        "–¶–µ–Ω–∞, —Ä—É–± (—Å –ù–î–°)": "",
        "–°–∫–∏–¥–∫–∞, %": "",
        "–¶–µ–Ω–∞ —Å–æ —Å–∫–∏–¥–∫–æ–π, —Ä—É–± (—Å –ù–î–°)": "",
        "–ö–æ–ª-–≤–æ": f"{total_qty_radiators} / {total_qty_brackets}",
        "–°—É–º–º–∞, —Ä—É–± (—Å –ù–î–°)": f"{total_sum:.2f}"
    }])
    
    return pd.concat([spec_data, total_row], ignore_index=True)

# –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å
st.title("üìã –°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è session_state –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
if "entry_values" not in st.session_state:
    st.session_state.entry_values = {}
if "radiator_discount" not in st.session_state:
    st.session_state.radiator_discount = 0.0
if "bracket_discount" not in st.session_state:
    st.session_state.bracket_discount = 0.0
if "bracket_type" not in st.session_state:
    st.session_state.bracket_type = "–ù–∞—Å—Ç–µ–Ω–Ω—ã–µ –∫—Ä–æ–Ω—à—Ç–µ–π–Ω—ã"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
has_values = any(val and val != "0" for val in st.session_state.entry_values.values())

if not has_values:
    st.info("–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –º–∞—Ç—Ä–∏—Ü—É –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ '–ì–ª–∞–≤–Ω–∞—è', —á—Ç–æ–±—ã —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—é.")
else:
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏
    spec_data = prepare_spec_data(
        st.session_state.entry_values,
        sheets,
        brackets_df,
        st.session_state.radiator_discount,
        st.session_state.bracket_discount,
        st.session_state.bracket_type
    )
    
    if spec_data.empty:
        st.warning("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
    else:
        # –î–æ–±–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
        spec_data_with_total = add_total_row(spec_data)
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
        st.dataframe(
            spec_data_with_total,
            use_container_width=True,
            hide_index=True,
            column_config={
                "‚Ññ": st.column_config.TextColumn("‚Ññ", width="small"),
                "–ê—Ä—Ç–∏–∫—É–ª": st.column_config.TextColumn("–ê—Ä—Ç–∏–∫—É–ª", width="small"),
                "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ": st.column_config.TextColumn("–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", width="large"),
                "–ú–æ—â–Ω–æ—Å—Ç—å, –í—Ç": st.column_config.NumberColumn("–ú–æ—â–Ω–æ—Å—Ç—å, –í—Ç", format="%.2f", width="small"),
                "–¶–µ–Ω–∞, —Ä—É–± (—Å –ù–î–°)": st.column_config.NumberColumn("–¶–µ–Ω–∞, —Ä—É–± (—Å –ù–î–°)", format="%.2f", width="medium"),
                "–°–∫–∏–¥–∫–∞, %": st.column_config.NumberColumn("–°–∫–∏–¥–∫–∞, %", format="%.2f", width="small"),
                "–¶–µ–Ω–∞ —Å–æ —Å–∫–∏–¥–∫–æ–π, —Ä—É–± (—Å –ù–î–°)": st.column_config.NumberColumn("–¶–µ–Ω–∞ —Å–æ —Å–∫–∏–¥–∫–æ–π, —Ä—É–± (—Å –ù–î–°)", format="%.2f", width="medium"),
                "–ö–æ–ª-–≤–æ": st.column_config.NumberColumn("–ö–æ–ª-–≤–æ", format="%d", width="small"),
                "–°—É–º–º–∞, —Ä—É–± (—Å –ù–î–°)": st.column_config.NumberColumn("–°—É–º–º–∞, —Ä—É–± (—Å –ù–î–°)", format="%.2f", width="medium")
            }
        )
        
        # –†–∞—Å—á–µ—Ç –∏—Ç–æ–≥–æ–≤—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        total_power = calculate_total_power(spec_data)
        total_weight, total_volume = calculate_total_weight_and_volume(spec_data, sheets)
        total_sum = spec_data["–°—É–º–º–∞, —Ä—É–± (—Å –ù–î–°)"].sum()
        
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        col1, col2, col3 = st.columns(3)
        
        with col1:
            st.metric("–°—É–º–º–∞—Ä–Ω–∞—è –º–æ—â–Ω–æ—Å—Ç—å", format_power(total_power))
        
        with col2:
            st.metric("–û–±—â–∏–π –≤–µ—Å", format_weight(total_weight))
        
        with col3:
            st.metric("–û–±—â–∏–π –æ–±—ä–µ–º", f"{total_volume:.3f} –º¬≥")
        
        st.metric("–û–±—â–∞—è —Å—É–º–º–∞ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏", f"{total_sum:.2f} —Ä—É–±")
        
        # –ö–Ω–æ–ø–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞
        if st.button("üíæ –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel"):
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —ç–∫—Å–ø–æ—Ä—Ç–∞
            st.success("–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —ç–∫—Å–ø–æ—Ä—Ç–∞ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏")