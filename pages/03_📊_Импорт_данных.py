# pages/03_üìä_–ò–º–ø–æ—Ä—Ç_–¥–∞–Ω–Ω—ã—Ö.py
import streamlit as st
import pandas as pd
import numpy as np
import json
import re
from pathlib import Path
import io

# === –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö ===
@st.cache_data
def load_data():
    matrix_path = Path("data/–ú–∞—Ç—Ä–∏—Ü–∞.xlsx")
    brackets_path = Path("data/–ö—Ä–æ–Ω—à—Ç–µ–π–Ω—ã.xlsx")
    
    if not matrix_path.exists():
        st.error("‚ùå –§–∞–π–ª '–ú–∞—Ç—Ä–∏—Ü–∞.xlsx' –Ω–µ –Ω–∞–π–¥–µ–Ω")
        st.stop()
    if not brackets_path.exists():
        st.error("‚ùå –§–∞–π–ª '–ö—Ä–æ–Ω—à—Ç–µ–π–Ω—ã.xlsx' –Ω–µ –Ω–∞–π–¥–µ–Ω")
        st.stop()
    
    sheets = pd.read_excel(matrix_path, sheet_name=None, engine="openpyxl")
    brackets_df = pd.read_excel(brackets_path, engine="openpyxl")
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫—Ä–æ–Ω—à—Ç–µ–π–Ω–æ–≤
    if "–ö—Ä–æ–Ω—à—Ç–µ–π–Ω—ã" in sheets:
        brackets_df = sheets["–ö—Ä–æ–Ω—à—Ç–µ–π–Ω—ã"].copy()
        del sheets["–ö—Ä–æ–Ω—à—Ç–µ–π–Ω—ã"]
    
    brackets_df['–ê—Ä—Ç–∏–∫—É–ª'] = brackets_df['–ê—Ä—Ç–∏–∫—É–ª'].astype(str).str.strip()
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–∏—Å—Ç–æ–≤ —Å —Ä–∞–¥–∏–∞—Ç–æ—Ä–∞–º–∏
    for name, df in sheets.items():
        df['–ê—Ä—Ç–∏–∫—É–ª'] = df['–ê—Ä—Ç–∏–∫—É–ª'].astype(str).str.strip()
        df['–í–µ—Å, –∫–≥'] = pd.to_numeric(df['–í–µ—Å, –∫–≥'], errors='coerce').fillna(0)
        df['–û–±—ä–µ–º, –º3'] = pd.to_numeric(df['–û–±—ä–µ–º, –º3'], errors='coerce').fillna(0)
        df['–ú–æ—â–Ω–æ—Å—Ç—å, –í—Ç'] = df.get('–ú–æ—â–Ω–æ—Å—Ç—å, –í—Ç', '')
    
    return sheets, brackets_df

sheets, brackets_df = load_data()

# === –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è ===
if "entry_values" not in st.session_state:
    st.session_state.entry_values = {}
if "mappings" not in st.session_state:
    st.session_state.mappings = {}
if "correspondence_data" not in st.session_state:
    st.session_state.correspondence_data = None

# === –§—É–Ω–∫—Ü–∏–∏ –∏–º–ø–æ—Ä—Ç–∞ ===
def parse_quantity(value):
    """–ü—Ä–µ–æ–±—Ä–∞–∑—É–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ"""
    try:
        if not value:
            return 0
        if isinstance(value, (int, float)):
            return int(round(float(value)))
        value = str(value).strip()
        while value.startswith('+'):
            value = value[1:]
        while value.endswith('+'):
            value = value[:-1]
        if not value:
            return 0
        parts = value.split('+')
        total = 0
        for part in parts:
            part = part.strip()
            if part:
                total += int(round(float(part)))
        return total
    except Exception:
        return 0

def load_mappings():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è"""
    mappings_file = Path("data/mappings.json")
    if mappings_file.exists():
        try:
            with open(mappings_file, 'r', encoding='utf-8') as f:
                return json.load(f)
        except:
            return {}
    return {}

def save_mappings(mappings):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è"""
    mappings_file = Path("data/mappings.json")
    mappings_file.parent.mkdir(exist_ok=True)
    with open(mappings_file, 'w', encoding='utf-8') as f:
        json.dump(mappings, f, ensure_ascii=False, indent=2)

def find_meteor_analog(competitor_name, qty):
    """–ù–∞—Ö–æ–¥–∏—Ç –∞–Ω–∞–ª–æ–≥ METEOR –¥–ª—è —Ä–∞–¥–∏–∞—Ç–æ—Ä–∞ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–∞"""
    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è
    mappings = load_mappings()
    if competitor_name in mappings:
        mapping = mappings[competitor_name]
        sheet_name = f"{mapping['connection']} {mapping['rad_type']}"
        art = mapping['meteor_art']
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
        simple_key = f"{sheet_name.replace(' ', '_')}_{art}"
        current_qty = parse_quantity(st.session_state.entry_values.get(simple_key, "0"))
        st.session_state.entry_values[simple_key] = str(current_qty + qty)
        return True, mapping['meteor_name'], art
    
    # –ï—Å–ª–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –ø—ã—Ç–∞–µ–º—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å
    meteor_match = None
    
    # –®–∞–±–ª–æ–Ω—ã –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
    patterns = [
        # –ü–∞–Ω–µ–ª—å–Ω—ã–π —Å—Ç–∞–ª—å–Ω–æ–π —Ä–∞–¥–∏–∞—Ç–æ—Ä Valve Compact —Ç–∏–ø V–° 22-500-600
        re.compile(r'(?:—Ä–∞–¥–∏–∞—Ç–æ—Ä|radiator).*?—Ç–∏–ø\s*([ckv])\s*(\d+)[-\s](\d+)[-\s](\d+)', re.IGNORECASE),
        # –†–∞–¥–∏–∞—Ç–æ—Ä—ã —Å—Ç–∞–ª—å–Ω—ã–µ —à—Ç–∞–º–ø–æ–≤–∞–Ω–Ω—ã–µ "–õ–∏–¥–µ—è" –õ–ö 11-504
        re.compile(r'(?:—Ä–∞–¥–∏–∞—Ç–æ—Ä|radiator).*?[–ªl][–∫k]\s*(\d+)[-\s](\d+)', re.IGNORECASE),
        # VC 22-500-600
        re.compile(r'([ckv])\s*(\d+)[-\s](\d+)[-\s](\d+)', re.IGNORECASE),
        # –õ–ö 11-504
        re.compile(r'[–ªl][–∫k]\s*(\d+)[-\s](\d+)', re.IGNORECASE)
    ]
    
    for pattern in patterns:
        match = pattern.search(competitor_name)
        if match:
            meteor_match = match
            break
    
    if meteor_match:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
        if meteor_match.re == patterns[0] or meteor_match.re == patterns[2]:
            connection_type = meteor_match.group(1).upper()
            rad_type = meteor_match.group(2)
            height = int(meteor_match.group(3))
            length = int(meteor_match.group(4))
            
            if connection_type in ['V', 'C']:
                connection = "VK-–ø—Ä–∞–≤–æ–µ"
            else:
                connection = "K-–±–æ–∫–æ–≤–æ–µ"
                
        elif meteor_match.re == patterns[1] or meteor_match.re == patterns[3]:
            rad_type = meteor_match.group(1)
            length = int(meteor_match.group(2))
            
            if rad_type in ['11', '22', '33']:
                height = 500
                connection = "VK-–ø—Ä–∞–≤–æ–µ"
            else:
                height = 500
                connection = "VK-–ø—Ä–∞–≤–æ–µ"
        
        # –ò—â–µ–º —Ä–∞–¥–∏–∞—Ç–æ—Ä –≤ –¥–∞–Ω–Ω—ã—Ö METEOR
        sheet_name = f"{connection} {rad_type}"
        if sheet_name in sheets:
            data = sheets[sheet_name]
            pattern = f"/{height}/{length}"
            match = data[data['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ'].str.contains(pattern, na=False)]
            
            if not match.empty:
                product = match.iloc[0]
                art = str(product['–ê—Ä—Ç–∏–∫—É–ª']).strip()
                
                # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
                simple_key = f"{sheet_name.replace(' ', '_')}_{art}"
                current_qty = parse_quantity(st.session_state.entry_values.get(simple_key, "0"))
                st.session_state.entry_values[simple_key] = str(current_qty + qty)
                
                return True, product['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ'], art
    
    return False, "", ""

def import_meteor_excel(uploaded_file):
    """–ò–º–ø–æ—Ä—Ç –∏–∑ Excel —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ METEOR"""
    try:
        df = pd.read_excel(uploaded_file, engine='openpyxl', header=None)
        
        # –ü–æ–∏—Å–∫ —Å—Ç–æ–ª–±—Ü–æ–≤ —Å –∞—Ä—Ç–∏–∫—É–ª–∞–º–∏ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º
        art_col = None
        qty_col = None
        header_row = 0
        
        for i, row in df.iterrows():
            for j, cell in enumerate(row):
                cell_str = str(cell).strip().lower()
                
                if not art_col and any(x in cell_str for x in ['–∞—Ä—Ç–∏–∫—É–ª', 'art', '–∫–æ–¥']):
                    art_col = j
                if not qty_col and any(x in cell_str for x in ['–∫–æ–ª-–≤–æ', '–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ', 'qty']):
                    qty_col = j
            
            if art_col is not None and qty_col is not None:
                header_row = i
                break
        
        if art_col is None:
            art_col = 0
        if qty_col is None:
            qty_col = 1 if len(df.columns) > 1 else 0
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        total_loaded = 0
        total_qty = 0
        
        for i in range(header_row + 1, len(df)):
            art = str(df.iloc[i, art_col]).strip()
            qty = df.iloc[i, qty_col]
            
            if not art or art.lower() == '–∏—Ç–æ–≥–æ':
                continue
                
            try:
                qty = float(qty)
                if qty > 0:
                    # –ò—â–µ–º –∞—Ä—Ç–∏–∫—É–ª –≤ –¥–∞–Ω–Ω—ã—Ö
                    found = False
                    for sheet_name, sheet_data in sheets.items():
                        if art in sheet_data['–ê—Ä—Ç–∏–∫—É–ª'].astype(str).str.strip().values:
                            simple_key = f"{sheet_name.replace(' ', '_')}_{art}"
                            current_qty = parse_quantity(st.session_state.entry_values.get(simple_key, "0"))
                            st.session_state.entry_values[simple_key] = str(current_qty + int(qty))
                            total_loaded += 1
                            total_qty += int(qty)
                            found = True
                            break
                    
                    if not found:
                        st.warning(f"–ê—Ä—Ç–∏–∫—É–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {art}")
                        
            except (ValueError, TypeError):
                continue
        
        return True, f"–£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {total_loaded} –ø–æ–∑–∏—Ü–∏–π\n–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {total_qty}"
        
    except Exception as e:
        return False, f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ Excel: {str(e)}"

def import_meteor_csv(uploaded_file):
    """–ò–º–ø–æ—Ä—Ç –∏–∑ CSV —Ñ–∞–π–ª–∞ METEOR"""
    try:
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –∫–æ–¥–∏—Ä–æ–≤–∫–∏
        content = uploaded_file.getvalue().decode('utf-8-sig')
        df = pd.read_csv(io.StringIO(content), sep=';', header=None)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
        has_headers = not df.iloc[0, 0].replace('.', '').isdigit()
        
        if has_headers:
            df = pd.read_csv(io.StringIO(content), sep=';', header=0)
        else:
            df.columns = ['–ê—Ä—Ç–∏–∫—É–ª', '–ö–æ–ª-–≤–æ']
        
        df = df[df.iloc[:, 0].notna()]
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–æ–ª–±—Ü—ã
        art_col = None
        qty_col = None
        
        for col in df.columns:
            col_lower = str(col).lower()
            if '–∞—Ä—Ç–∏–∫—É–ª' in col_lower or 'art' in col_lower or '–∫–æ–¥' in col_lower:
                art_col = col
            elif '–∫–æ–ª-–≤–æ' in col_lower or '–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ' in col_lower or 'qty' in col_lower:
                qty_col = col
        
        if art_col is None:
            art_col = df.columns[0]
        if qty_col is None:
            qty_col = df.columns[1] if len(df.columns) > 1 else None
        
        if qty_col is None:
            return False, "–ù–µ –Ω–∞–π–¥–µ–Ω —Å—Ç–æ–ª–±–µ—Ü —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º"
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        df[art_col] = df[art_col].astype(str).str.replace(' ', '').str.strip()
        df[qty_col] = pd.to_numeric(df[qty_col], errors='coerce').fillna(0).astype(int)
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∏ —Å—É–º–º–∏—Ä—É–µ–º
        grouped_df = df.groupby(art_col)[qty_col].sum().reset_index()
        
        total_loaded = 0
        total_qty = 0
        
        for _, row in grouped_df.iterrows():
            art = str(row[art_col]).strip()
            qty = int(row[qty_col])
            
            found = False
            for sheet_name, sheet_data in sheets.items():
                mask = sheet_data['–ê—Ä—Ç–∏–∫—É–ª'].astype(str).str.strip() == art
                if mask.any():
                    simple_key = f"{sheet_name.replace(' ', '_')}_{art}"
                    current_qty = parse_quantity(st.session_state.entry_values.get(simple_key, "0"))
                    st.session_state.entry_values[simple_key] = str(current_qty + qty)
                    total_loaded += 1
                    total_qty += qty
                    found = True
                    break
            
            if not found:
                st.warning(f"–ê—Ä—Ç–∏–∫—É–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {art}")
        
        return True, f"–£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {total_loaded} –ø–æ–∑–∏—Ü–∏–π\n–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {total_qty}"
        
    except Exception as e:
        return False, f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ CSV: {str(e)}"

def import_foreign_spec(uploaded_file, file_type):
    """–ò–º–ø–æ—Ä—Ç –∏–∑ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥—Ä—É–≥–∏—Ö –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π"""
    try:
        if file_type == "excel":
            df = pd.read_excel(uploaded_file, engine='openpyxl', header=None)
        else:  # CSV
            content = uploaded_file.getvalue().decode('utf-8-sig')
            df = pd.read_csv(io.StringIO(content), sep=';', header=None)
        
        # –ü–æ–∏—Å–∫ —Å—Ç–æ–ª–±—Ü–æ–≤
        name_col = None
        qty_col = None
        
        for col in df.columns:
            col_lower = str(col).lower()
            if '–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ' in col_lower or 'name' in col_lower or '–æ–ø–∏—Å–∞–Ω–∏–µ' in col_lower:
                name_col = col
            elif '–∫–æ–ª-–≤–æ' in col_lower or '–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ' in col_lower or 'qty' in col_lower:
                qty_col = col
        
        if name_col is None:
            name_col = df.columns[0]
        if qty_col is None:
            qty_col = df.columns[1] if len(df.columns) > 1 else None
        
        if qty_col is None:
            return False, "–ù–µ –Ω–∞–π–¥–µ–Ω —Å—Ç–æ–ª–±–µ—Ü —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º"
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        correspondence_data = []
        total_loaded = 0
        total_qty = 0
        not_found = []
        
        for _, row in df.iterrows():
            try:
                name = str(row[name_col]).strip() if pd.notna(row[name_col]) else ""
                
                qty = 0
                if pd.notna(row[qty_col]):
                    try:
                        qty_val = row[qty_col]
                        if isinstance(qty_val, str):
                            qty_val = qty_val.replace(',', '.').strip()
                        qty = int(float(qty_val)) if str(qty_val).strip() else 0
                    except (ValueError, TypeError):
                        qty = 0
                
                if qty <= 0 or not name:
                    continue
                
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–µ—Ä–∞–¥–∏–∞—Ç–æ—Ä—ã
                if not any(x in name.lower() for x in ['—Ä–∞–¥–∏–∞—Ç–æ—Ä', 'radiator', 'k-profil', 'vk-profil']):
                    continue
                
                # –ò—â–µ–º –∞–Ω–∞–ª–æ–≥
                found, meteor_name, meteor_art = find_meteor_analog(name, qty)
                
                if found:
                    correspondence_data.append({
                        "–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ": name,
                        "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ": qty,
                        "–ê–Ω–∞–ª–æ–≥ Meteor": meteor_name,
                        "–ê—Ä—Ç–∏–∫—É–ª Meteor": meteor_art,
                        "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π": "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω"
                    })
                    total_loaded += 1
                    total_qty += qty
                else:
                    not_found.append(name)
                    correspondence_data.append({
                        "–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ": name,
                        "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ": qty,
                        "–ê–Ω–∞–ª–æ–≥ Meteor": "",
                        "–ê—Ä—Ç–∏–∫—É–ª Meteor": "",
                        "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π": "–ù–µ –Ω–∞–π–¥–µ–Ω –∞–Ω–∞–ª–æ–≥"
                    })
                    
            except Exception as e:
                continue
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è
        if correspondence_data:
            st.session_state.correspondence_data = pd.DataFrame(correspondence_data)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ
        msg = f"–£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {total_loaded} –ø–æ–∑–∏—Ü–∏–π\n–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {total_qty}"
        
        if not_found:
            msg += f"\n\n–ù–µ –Ω–∞–π–¥–µ–Ω—ã –∞–Ω–∞–ª–æ–≥–∏ –¥–ª—è {len(not_found)} –ø–æ–∑–∏—Ü–∏–π"
            if len(not_found) <= 5:
                msg += ":\n" + "\n".join(f"- {item}" for item in not_found[:5])
            else:
                msg += f" (–ø–µ—Ä–≤—ã–µ 5):\n" + "\n".join(f"- {item}" for item in not_found[:5])
        
        return True, msg
        
    except Exception as e:
        return False, f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {str(e)}"

# === –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Å—Ç—Ä–∞–Ω–∏—Ü—ã ===
st.title("üìä –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö")

st.info("""
–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–¥–±–æ—Ä–∞ —Ä–∞–¥–∏–∞—Ç–æ—Ä–æ–≤ METEOR.
–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ñ–∞–π–ª—ã Excel (.xlsx, .xls) –∏ CSV.
""")

# –°–æ–∑–¥–∞–µ–º –≤–∫–ª–∞–¥–∫–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∏–º–ø–æ—Ä—Ç–∞
tab1, tab2, tab3 = st.tabs([
    "üìã –°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è METEOR", 
    "üìÅ –§–∞–π–ª METEOR CSV", 
    "üè≠ –î—Ä—É–≥–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–∏"
])

with tab1:
    st.subheader("–ò–º–ø–æ—Ä—Ç –∏–∑ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ METEOR")
    st.write("–ó–∞–≥—Ä—É–∑–∏—Ç–µ Excel —Ñ–∞–π–ª —Å–æ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–µ–π METEOR")
    
    uploaded_file = st.file_uploader(
        "–í—ã–±–µ—Ä–∏—Ç–µ Excel —Ñ–∞–π–ª", 
        type=["xlsx", "xls"],
        key="excel_upload"
    )
    
    if uploaded_file is not None:
        if st.button("–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–∑ Excel", key="import_excel"):
            with st.spinner("–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞..."):
                success, message = import_meteor_excel(uploaded_file)
                if success:
                    st.success(message)
                    st.rerun()
                else:
                    st.error(message)

with tab2:
    st.subheader("–ò–º–ø–æ—Ä—Ç –∏–∑ —Ñ–∞–π–ª–∞ METEOR CSV")
    st.write("–ó–∞–≥—Ä—É–∑–∏—Ç–µ CSV —Ñ–∞–π–ª —Å–æ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–µ–π METEOR")
    
    uploaded_file = st.file_uploader(
        "–í—ã–±–µ—Ä–∏—Ç–µ CSV —Ñ–∞–π–ª", 
        type=["csv"],
        key="csv_upload"
    )
    
    if uploaded_file is not None:
        if st.button("–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–∑ CSV", key="import_csv"):
            with st.spinner("–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞..."):
                success, message = import_meteor_csv(uploaded_file)
                if success:
                    st.success(message)
                    st.rerun()
                else:
                    st.error(message)

with tab3:
    st.subheader("–ò–º–ø–æ—Ä—Ç —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–π –¥—Ä—É–≥–∏—Ö –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π")
    st.write("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å–æ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–µ–π –¥—Ä—É–≥–æ–≥–æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–¥–±–æ—Ä–∞ –∞–Ω–∞–ª–æ–≥–æ–≤ METEOR")
    
    file_type = st.radio(
        "–¢–∏–ø —Ñ–∞–π–ª–∞",
        ["Excel", "CSV"],
        horizontal=True
    )
    
    uploaded_file = st.file_uploader(
        f"–í—ã–±–µ—Ä–∏—Ç–µ {file_type} —Ñ–∞–π–ª", 
        type=["xlsx", "xls", "csv"] if file_type == "Excel" else ["csv"],
        key="foreign_upload"
    )
    
    if uploaded_file is not None:
        if st.button("–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∏ –Ω–∞–π—Ç–∏ –∞–Ω–∞–ª–æ–≥–∏", key="import_foreign"):
            with st.spinner("–ü–æ–∏—Å–∫ –∞–Ω–∞–ª–æ–≥–æ–≤ METEOR..."):
                success, message = import_foreign_spec(uploaded_file, file_type.lower())
                if success:
                    st.success(message)
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è, –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ
                    if st.session_state.correspondence_data is not None:
                        st.subheader("–¢–∞–±–ª–∏—Ü–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è")
                        st.dataframe(
                            st.session_state.correspondence_data,
                            use_container_width=True,
                            hide_index=True
                        )
                        
                        # –ö–Ω–æ–ø–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è
                        if st.button("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–∞–±–ª–∏—Ü—É —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è"):
                            csv_data = st.session_state.correspondence_data.to_csv(index=False, sep=';', encoding='utf-8-sig')
                            st.download_button(
                                label="üì• –°–∫–∞—á–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è",
                                data=csv_data,
                                file_name="–¢–∞–±–ª–∏—Ü–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –ø–µ—Ä–µ–ø–æ–¥–±–æ—Ä–∞ –Ω–∞ —Ä–∞–¥–∏–∞—Ç–æ—Ä—ã METEOR.csv",
                                mime="text/csv"
                            )
                    
                    st.rerun()
                else:
                    st.error(message)

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
st.markdown("---")
st.subheader("–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ")

filled_cells = sum(1 for val in st.session_state.entry_values.values() if val and parse_quantity(val) > 0)
if filled_cells > 0:
    st.success(f"‚úÖ –í —Å–∏—Å—Ç–µ–º–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {filled_cells} –ø–æ–∑–∏—Ü–∏–π")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏
    selected_items = []
    for key, value in st.session_state.entry_values.items():
        if value and parse_quantity(value) > 0:
            parts = key.split('_')
            if len(parts) >= 3:
                sheet_name = f"{parts[0]} {parts[1]}"
                art = parts[2]
                
                for sheet, data in sheets.items():
                    if sheet == sheet_name:
                        product = data[data['–ê—Ä—Ç–∏–∫—É–ª'] == art]
                        if not product.empty:
                            selected_items.append({
                                '–ê—Ä—Ç–∏–∫—É–ª': art,
                                '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ': product.iloc[0]['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ'],
                                '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ': parse_quantity(value)
                            })
                            break
    
    if selected_items:
        st.write("**–ó–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –ø–æ–∑–∏—Ü–∏–∏:**")
        df = pd.DataFrame(selected_items)
        st.dataframe(df, use_container_width=True, hide_index=True)

# –ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
st.markdown("---")
if st.button("üè† –ü–µ—Ä–µ–π—Ç–∏ –∫ –ø–æ–¥–±–æ—Ä—É —Ä–∞–¥–∏–∞—Ç–æ—Ä–æ–≤"):
    st.switch_page("pages/01_üè†_–ì–ª–∞–≤–Ω–∞—è.py")

# –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö
if st.button("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"):
    st.session_state.entry_values.clear()
    st.session_state.correspondence_data = None
    st.success("–í—Å–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã")
    st.rerun()