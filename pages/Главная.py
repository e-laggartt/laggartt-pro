# –ì–ª–∞–≤–Ω–∞—è.py
import streamlit as st
import pandas as pd
from utils.calculator import parse_quantity, calculate_brackets
from utils.session_manager import initialize_session_state

def main():
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
    initialize_session_state()
    
    st.title("üè† –ú–∞—Ç—Ä–∏—Ü–∞ —Ä–∞–¥–∏–∞—Ç–æ—Ä–æ–≤")
    
    if 'sheets' not in st.session_state or not st.session_state.sheets:
        st.error("‚ùå –î–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ —Ñ–∞–π–ª–∞ data/–ú–∞—Ç—Ä–∏—Ü–∞.xlsx")
        
        # –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö
        if st.button("üîÑ –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"):
            from utils.data_loader import load_radiator_data
            st.session_state.sheets = load_radiator_data()
            st.rerun()
        return
    
    sheets = st.session_state.sheets
    
    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    with st.sidebar:
        st.header("üîß –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–±–æ—Ä–∞")
        
        # –í—ã–±–æ—Ä –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        st.subheader("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ")
        connection = st.radio(
            "–í–∏–¥ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:",
            ["VK-–ø—Ä–∞–≤–æ–µ", "VK-–ª–µ–≤–æ–µ", "K-–±–æ–∫–æ–≤–æ–µ"],
            index=0,
            key="connection_radio"
        )
        st.session_state.connection = connection
        
        # –í—ã–±–æ—Ä —Ç–∏–ø–∞ —Ä–∞–¥–∏–∞—Ç–æ—Ä–∞
        st.subheader("–¢–∏–ø —Ä–∞–¥–∏–∞—Ç–æ—Ä–∞")
        if connection == "VK-–ª–µ–≤–æ–µ":
            rad_types = ["10", "11", "30", "33"]
        else:
            rad_types = ["10", "11", "20", "21", "22", "30", "33"]
            
        radiator_type = st.radio(
            "–¢–∏–ø:",
            rad_types,
            index=0,
            key="radiator_radio"
        )
        st.session_state.radiator_type = radiator_type
        
        # –í—ã–±–æ—Ä –∫—Ä–æ–Ω—à—Ç–µ–π–Ω–æ–≤
        st.subheader("–ö—Ä–µ–ø–ª–µ–Ω–∏–µ")
        bracket_type = st.radio(
            "–¢–∏–ø –∫—Ä–µ–ø–ª–µ–Ω–∏—è:",
            ["–ù–∞—Å—Ç–µ–Ω–Ω—ã–µ –∫—Ä–æ–Ω—à—Ç–µ–π–Ω—ã", "–ù–∞–ø–æ–ª—å–Ω—ã–µ –∫—Ä–æ–Ω—à—Ç–µ–π–Ω—ã", "–ë–µ–∑ –∫—Ä–æ–Ω—à—Ç–µ–π–Ω–æ–≤"],
            index=0,
            key="bracket_radio"
        )
        st.session_state.bracket_type = bracket_type
        
        # –°–∫–∏–¥–∫–∏
        st.subheader("üí∞ –°–∫–∏–¥–∫–∏")
        col1, col2 = st.columns(2)
        with col1:
            rad_discount = st.number_input(
                "–†–∞–¥–∏–∞—Ç–æ—Ä—ã, %",
                min_value=0.0,
                max_value=100.0,
                value=st.session_state.discounts["radiators"],
                step=1.0,
                key="rad_discount_input"
            )
        with col2:
            br_discount = st.number_input(
                "–ö—Ä–æ–Ω—à—Ç–µ–π–Ω—ã, %",
                min_value=0.0,
                max_value=100.0,
                value=st.session_state.discounts["brackets"],
                step=1.0,
                key="br_discount_input"
            )
        
        st.session_state.discounts = {
            "radiators": rad_discount,
            "brackets": br_discount
        }
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        st.subheader("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
        show_tooltips = st.checkbox(
            "–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø–æ–¥—Å–∫–∞–∑–∫–∏", 
            value=st.session_state.show_tooltips,
            key="tooltips_checkbox"
        )
        st.session_state.show_tooltips = show_tooltips
        
        # –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        st.markdown("---")
        st.subheader("üöÄ –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è")
        
        if st.button("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –º–∞—Ç—Ä–∏—Ü—É", type="secondary"):
            st.session_state.entry_values = {}
            st.rerun()
            
        if st.button("üìã –ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏", type="primary"):
            st.switch_page("pages/02_üìã_–°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è.py")
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å - –º–∞—Ç—Ä–∏—Ü–∞ —Ä–∞–¥–∏–∞—Ç–æ—Ä–æ–≤
    st.header(f"üìä –ú–∞—Ç—Ä–∏—Ü–∞: {connection} {radiator_type}")
    
    sheet_name = f"{connection} {radiator_type}"
    if sheet_name not in sheets:
        st.error(f"‚ùå –õ–∏—Å—Ç '{sheet_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –¥–∞–Ω–Ω—ã—Ö")
        st.info("–î–æ—Å—Ç—É–ø–Ω—ã–µ –ª–∏—Å—Ç—ã:")
        for available_sheet in sheets.keys():
            st.write(f"- {available_sheet}")
        return
    
    df = sheets[sheet_name]
    lengths = list(range(400, 2100, 100))  # 400-2000 —Å —à–∞–≥–æ–º 100
    heights = [300, 400, 500, 600, 900]
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Ç—Ä–∏—Ü—ã
    st.markdown("#### –¥–ª–∏–Ω–∞ —Ä–∞–¥–∏–∞—Ç–æ—Ä–æ–≤, –º–º ‚Üí")
    
    # –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Å—Ç–æ–ª–±—Ü–æ–≤ (–≤—ã—Å–æ—Ç—ã)
    cols = st.columns(len(heights) + 1)
    with cols[0]:
        st.markdown("**–≤—ã—Å–æ—Ç–∞<br>—Ä–∞–¥–∏–∞—Ç–æ—Ä–æ–≤, –º–º**", unsafe_allow_html=True)
    
    for j, h in enumerate(heights):
        with cols[j + 1]:
            st.markdown(f"**{h}**")
    
    # –°—Ç—Ä–æ–∫–∏ –º–∞—Ç—Ä–∏—Ü—ã
    total_filled = 0
    total_quantity = 0
    
    for i, l in enumerate(lengths):
        cols = st.columns(len(heights) + 1)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–æ–∫–∏ (–¥–ª–∏–Ω–∞)
        with cols[0]:
            st.markdown(f"**{l}**")
        
        # –Ø—á–µ–π–∫–∏ –º–∞—Ç—Ä–∏—Ü—ã
        for j, h in enumerate(heights):
            with cols[j + 1]:
                pattern = f"/{h}–º–º/{l}–º–º"
                match = df[df['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ'].str.contains(pattern, na=False)]
                
                if not match.empty:
                    product = match.iloc[0]
                    art = str(product['–ê—Ä—Ç–∏–∫—É–ª'])
                    key = (sheet_name, art)
                    
                    current_val = st.session_state.entry_values.get(key, "")
                    
                    # –ü–æ–ª–µ –≤–≤–æ–¥–∞ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
                    new_val = st.text_input(
                        "",
                        value=current_val,
                        key=f"matrix_{l}_{h}_{i}_{j}",
                        label_visibility="collapsed",
                        placeholder="0"
                    )
                    
                    # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤–≤–æ–¥–∞
                    if new_val and not all(c in '0123456789+' for c in new_val):
                        st.error("–¢–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –∏ +")
                        new_val = current_val
                    
                    if new_val != current_val:
                        st.session_state.entry_values[key] = new_val
                        quantity = parse_quantity(new_val)
                        if quantity > 0:
                            total_filled += 1
                            total_quantity += quantity
                    
                    # –ü–æ–¥—Å–∫–∞–∑–∫–∞ –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
                    if st.session_state.show_tooltips and product is not None:
                        power = product.get('–ú–æ—â–Ω–æ—Å—Ç—å, –í—Ç', 'N/A')
                        weight = product.get('–í–µ—Å, –∫–≥', 'N/A')
                        volume = product.get('–û–±—ä–µ–º, –º3', 'N/A')
                        price = product.get('–¶–µ–Ω–∞, —Ä—É–±', 'N/A')
                        
                        tooltip_text = f"""
                        **{product.get('–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ', 'N/A')}**
                        
                        üîπ –ê—Ä—Ç–∏–∫—É–ª: {art}
                        üîπ –ú–æ—â–Ω–æ—Å—Ç—å: {power} –í—Ç
                        üîπ –í–µ—Å: {weight} –∫–≥
                        üîπ –û–±—ä–µ–º: {volume} –º¬≥
                        üîπ –¶–µ–Ω–∞: {price} ‚ÇΩ
                        """
                        
                        if new_val and parse_quantity(new_val) > 0:
                            qty = parse_quantity(new_val)
                            tooltip_text += f"\nüîπ –í—ã–±—Ä–∞–Ω–æ: {qty} —à—Ç"
                        
                        st.markdown(f"<span title='{tooltip_text}'>‚ÑπÔ∏è</span>", unsafe_allow_html=True)
                else:
                    st.markdown("‚Äî")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –Ω–∞–≤–∏–≥–∞—Ü–∏—è
    if total_filled > 0:
        st.success(f"‚úÖ –ó–∞–ø–æ–ª–Ω–µ–Ω–æ —è—á–µ–µ–∫: {total_filled} | –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: {total_quantity} —à—Ç")
        
        col1, col2 = st.columns(2)
        with col1:
            if st.button("üìã –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—é", type="primary", use_container_width=True):
                st.switch_page("pages/02_üìã_–°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è.py")
        with col2:
            if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É", use_container_width=True):
                st.rerun()
    else:
        st.info("üí° –ó–∞–ø–æ–ª–Ω–∏—Ç–µ —è—á–µ–π–∫–∏ –º–∞—Ç—Ä–∏—Ü—ã –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏")

if __name__ == "__main__":
    main()