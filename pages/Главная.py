import streamlit as st
import pandas as pd
from utils.calculator import parse_quantity, calculate_brackets

def main():
    st.title("üè† –ú–∞—Ç—Ä–∏—Ü–∞ —Ä–∞–¥–∏–∞—Ç–æ—Ä–æ–≤")
    
    if 'sheets' not in st.session_state:
        st.error("–î–∞–Ω–Ω—ã–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –í–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É.")
        return
    
    sheets = st.session_state.sheets
    
    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    with st.sidebar:
        st.header("üîß –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–±–æ—Ä–∞")
        
        # –í—ã–±–æ—Ä –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        st.subheader("–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ")
        connection = st.radio(
            "–í–∏–¥ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:",
            ["VK-–ø—Ä–∞–≤–æ–µ", "VK-–ª–µ–≤–æ–µ", "K-–±–æ–∫–æ–≤–æ–µ"],
            index=0,
            key="connection_radio"
        )
        
        # –í—ã–±–æ—Ä —Ç–∏–ø–∞ —Ä–∞–¥–∏–∞—Ç–æ—Ä–∞
        st.subheader("–¢–∏–ø —Ä–∞–¥–∏–∞—Ç–æ—Ä–∞")
        if connection == "VK-–ª–µ–≤–æ–µ":
            rad_types = ["10", "11", "30", "33"]
        else:
            rad_types = ["10", "11", "20", "21", "22", "30", "33"]
            
        radiator_type = st.radio(
            "–¢–∏–ø:",
            rad_types,
            index=0,
            key="radiator_radio"
        )
        
        # –í—ã–±–æ—Ä –∫—Ä–æ–Ω—à—Ç–µ–π–Ω–æ–≤
        st.subheader("–ö—Ä–µ–ø–ª–µ–Ω–∏–µ")
        bracket_type = st.radio(
            "–¢–∏–ø –∫—Ä–µ–ø–ª–µ–Ω–∏—è:",
            ["–ù–∞—Å—Ç–µ–Ω–Ω—ã–µ –∫—Ä–æ–Ω—à—Ç–µ–π–Ω—ã", "–ù–∞–ø–æ–ª—å–Ω—ã–µ –∫—Ä–æ–Ω—à—Ç–µ–π–Ω—ã", "–ë–µ–∑ –∫—Ä–æ–Ω—à—Ç–µ–π–Ω–æ–≤"],
            index=0,
            key="bracket_radio"
        )
        
        # –°–∫–∏–¥–∫–∏
        st.subheader("üí∞ –°–∫–∏–¥–∫–∏")
        col1, col2 = st.columns(2)
        with col1:
            rad_discount = st.number_input(
                "–†–∞–¥–∏–∞—Ç–æ—Ä—ã, %",
                min_value=0.0,
                max_value=100.0,
                value=0.0,
                step=1.0,
                key="rad_discount_input"
            )
        with col2:
            br_discount = st.number_input(
                "–ö—Ä–æ–Ω—à—Ç–µ–π–Ω—ã, %",
                min_value=0.0,
                max_value=100.0,
                value=0.0,
                step=1.0,
                key="br_discount_input"
            )
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å - –º–∞—Ç—Ä–∏—Ü–∞ —Ä–∞–¥–∏–∞—Ç–æ—Ä–æ–≤
    st.header(f"üìä –ú–∞—Ç—Ä–∏—Ü–∞: {connection} {radiator_type}")
    
    sheet_name = f"{connection} {radiator_type}"
    if sheet_name not in sheets:
        st.error(f"–õ–∏—Å—Ç '{sheet_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –¥–∞–Ω–Ω—ã—Ö")
        return
    
    df = sheets[sheet_name]
    lengths = list(range(400, 2100, 100))
    heights = [300, 400, 500, 600, 900]
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Ç—Ä–∏—Ü—ã
    st.markdown("#### –¥–ª–∏–Ω–∞ —Ä–∞–¥–∏–∞—Ç–æ—Ä–æ–≤, –º–º ‚Üí")
    
    # –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Å—Ç–æ–ª–±—Ü–æ–≤ (–≤—ã—Å–æ—Ç—ã)
    cols = st.columns(len(heights) + 1)
    with cols[0]:
        st.markdown("**–≤—ã—Å–æ—Ç–∞<br>—Ä–∞–¥–∏–∞—Ç–æ—Ä–æ–≤, –º–º**", unsafe_allow_html=True)
    
    for j, h in enumerate(heights):
        with cols[j + 1]:
            st.markdown(f"**{h}**")
    
    # –°—Ç—Ä–æ–∫–∏ –º–∞—Ç—Ä–∏—Ü—ã
    has_any_value = any(st.session_state.entry_values.values())
    
    for i, l in enumerate(lengths):
        cols = st.columns(len(heights) + 1)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–æ–∫–∏ (–¥–ª–∏–Ω–∞)
        with cols[0]:
            st.markdown(f"**{l}**")
        
        # –Ø—á–µ–π–∫–∏ –º–∞—Ç—Ä–∏—Ü—ã
        for j, h in enumerate(heights):
            with cols[j + 1]:
                pattern = f"/{h}–º–º/{l}–º–º"
                match = df[df['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ'].str.contains(pattern, na=False)]
                
                if not match.empty:
                    product = match.iloc[0]
                    art = str(product['–ê—Ä—Ç–∏–∫—É–ª'])
                    key = (sheet_name, art)
                    
                    current_val = st.session_state.entry_values.get(key, "")
                    
                    # –ü–æ–ª–µ –≤–≤–æ–¥–∞
                    new_val = st.text_input(
                        "",
                        value=current_val,
                        key=f"matrix_{i}_{j}",
                        label_visibility="collapsed",
                        placeholder="0"
                    )
                    
                    if new_val != current_val:
                        st.session_state.entry_values[key] = new_val
                        
                    # –ü–æ–¥—Å–∫–∞–∑–∫–∞ –ø—Ä–∏ –Ω–∞–≤–µ–¥–µ–Ω–∏–∏
                    if st.session_state.get('show_tooltips', True) and new_val:
                        with st.expander("", expanded=False):
                            st.caption(f"üîπ –ê—Ä—Ç–∏–∫—É–ª: {art}")
                            st.caption(f"üîπ –ú–æ—â–Ω–æ—Å—Ç—å: {product.get('–ú–æ—â–Ω–æ—Å—Ç—å, –í—Ç', 'N/A')} –í—Ç")
                            st.caption(f"üîπ –í–µ—Å: {product.get('–í–µ—Å, –∫–≥', 'N/A')} –∫–≥")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    total_entries = len([v for v in st.session_state.entry_values.values() if v])
    if total_entries > 0:
        st.success(f"‚úÖ –ó–∞–ø–æ–ª–Ω–µ–Ω–æ —è—á–µ–µ–∫: {total_entries}")
        
        if st.button("üìã –ü–µ—Ä–µ–π—Ç–∏ –∫ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏", type="primary"):
            st.switch_page("pages/02_üìã_–°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è.py")

if __name__ == "__main__":
    main()