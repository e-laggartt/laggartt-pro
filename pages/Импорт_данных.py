# pages/03_üìä_–ò–º–ø–æ—Ä—Ç_–¥–∞–Ω–Ω—ã—Ö.py
import streamlit as st
import pandas as pd
import io
import re
from utils.session_manager import initialize_session_state, save_mappings
from utils.calculator import parse_quantity

st.set_page_config(
    page_title="–ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö - RadiaTool Pro",
    page_icon="üìä", 
    layout="wide"
)

def main():
    initialize_session_state()
    
    st.title("üìä –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö")
    st.markdown("---")
    
    # –í—ã–±–æ—Ä —Ç–∏–ø–∞ –∏–º–ø–æ—Ä—Ç–∞
    import_type = st.radio(
        "**–¢–∏–ø –∏–º–ø–æ—Ä—Ç–∞:**",
        ["METEOR —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è", "–î—Ä—É–≥–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–∏"],
        horizontal=True,
        key="import_type_radio"
    )
    
    if import_type == "METEOR —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è":
        import_meteor_spec()
    else:
        import_other_manufacturers()

def import_meteor_spec():
    """–ò–º–ø–æ—Ä—Ç —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–π METEOR"""
    
    st.subheader("üì• –ò–º–ø–æ—Ä—Ç –∏–∑ METEOR")
    
    uploaded_file = st.file_uploader(
        "**–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏**",
        type=['xlsx', 'xls', 'csv'],
        help="–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç—ã: Excel (.xlsx, .xls), CSV",
        key="meteor_uploader"
    )
    
    if uploaded_file is not None:
        try:
            # –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
            if uploaded_file.name.endswith('.csv'):
                df = pd.read_csv(uploaded_file, encoding='utf-8')
            else:
                df = pd.read_excel(uploaded_file)
            
            st.success(f"‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: {uploaded_file.name}")
            
            # –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö
            with st.expander("üîç –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö", expanded=True):
                st.write(f"**–†–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö:** {len(df)} —Å—Ç—Ä–æ–∫, {len(df.columns)} —Å—Ç–æ–ª–±—Ü–æ–≤")
                st.dataframe(df.head(10), use_container_width=True)
            
            # –ê–≤—Ç–æ—Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–æ–≤
            art_col, qty_col = detect_columns(df)
            
            if art_col and qty_col:
                st.info(f"üìä –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: –ê—Ä—Ç–∏–∫—É–ª - '{art_col}', –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ - '{qty_col}'")
                
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
                processed_df = process_meteor_data(df, art_col, qty_col)
                
                if not processed_df.empty:
                    display_processed_data(processed_df, "METEOR")
                    
            else:
                st.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—Ç–æ–ª–±—Ü—ã")
                manual_column_selection(df)
                
        except Exception as e:
            st.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {e}")

def import_other_manufacturers():
    """–ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –¥—Ä—É–≥–∏—Ö –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π"""
    
    st.subheader("üè≠ –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –¥—Ä—É–≥–∏—Ö –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π")
    
    st.info("""
    **üîç –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–π:**
    - VC 22-500-600
    - –õ–ö 11-504  
    - —Ç–∏–ø 10-400-1000
    - VK 30-600-1200
    """)
    
    uploaded_file = st.file_uploader(
        "**–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è–º–∏ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤**",
        type=['xlsx', 'xls', 'csv'],
        key="competitor_uploader"
    )
    
    if uploaded_file is not None:
        try:
            # –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
            if uploaded_file.name.endswith('.csv'):
                df = pd.read_csv(uploaded_file, encoding='utf-8')
            else:
                df = pd.read_excel(uploaded_file)
            
            st.success(f"‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: {uploaded_file.name}")
            
            # –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
            with st.expander("üîç –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö", expanded=True):
                st.dataframe(df.head(10), use_container_width=True)
            
            # –ê–≤—Ç–æ—Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–æ–≤
            art_col, qty_col, name_col = detect_competitor_columns(df)
            
            if name_col and qty_col:
                st.info(f"üìä –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ - '{name_col}', –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ - '{qty_col}'")
                
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤
                processed_df = process_competitor_data(df, name_col, qty_col)
                
                if not processed_df.empty:
                    display_processed_data(processed_df, "Competitor")
                    
            else:
                st.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—Ç–æ–ª–±—Ü—ã")
                manual_competitor_selection(df)
                
        except Exception as e:
            st.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {e}")

def detect_columns(df):
    """–ê–≤—Ç–æ—Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–æ–≤ –¥–ª—è METEOR"""
    art_col, qty_col = None, None
    
    for col in df.columns:
        col_lower = str(col).lower()
        if any(keyword in col_lower for keyword in ['–∞—Ä—Ç–∏–∫—É–ª', 'art', '–∫–æ–¥', 'code', 'articul']):
            art_col = col
        elif any(keyword in col_lower for keyword in ['–∫–æ–ª-–≤–æ', '–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ', 'qty', 'quantity', 'count']):
            qty_col = col
    
    return art_col, qty_col

def detect_competitor_columns(df):
    """–ê–≤—Ç–æ—Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–æ–≤ –¥–ª—è –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤"""
    art_col, qty_col, name_col = None, None, None
    
    for col in df.columns:
        col_lower = str(col).lower()
        if any(keyword in col_lower for keyword in ['–∞—Ä—Ç–∏–∫—É–ª', 'art', '–∫–æ–¥', 'code']):
            art_col = col
        elif any(keyword in col_lower for keyword in ['–∫–æ–ª-–≤–æ', '–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ', 'qty', 'quantity']):
            qty_col = col
        elif any(keyword in col_lower for keyword in ['–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ', 'name', '–Ω–∞–∑–≤–∞–Ω–∏–µ', 'product']):
            name_col = col
    
    return art_col, qty_col, name_col

def process_meteor_data(df, art_col, qty_col):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö METEOR"""
    try:
        # –ë–∞–∑–æ–≤–∞—è –æ—á–∏—Å—Ç–∫–∞
        processed_df = df[[art_col, qty_col]].copy()
        processed_df.columns = ['–ê—Ä—Ç–∏–∫—É–ª', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ']
        
        # –£–¥–∞–ª–µ–Ω–∏–µ –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫
        processed_df = processed_df.dropna()
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∞—Ä—Ç–∏–∫—É–ª–æ–≤ –∫ —Å—Ç—Ä–æ–∫–æ–≤–æ–º—É —Ç–∏–ø—É
        processed_df['–ê—Ä—Ç–∏–∫—É–ª'] = processed_df['–ê—Ä—Ç–∏–∫—É–ª'].astype(str)
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤
        processed_df['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'] = pd.to_numeric(processed_df['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'], errors='coerce')
        processed_df = processed_df.dropna(subset=['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'])
        processed_df['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'] = processed_df['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'].astype(int)
        
        # –°—É–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö –∞—Ä—Ç–∏–∫—É–ª–æ–≤
        processed_df = processed_df.groupby('–ê—Ä—Ç–∏–∫—É–ª', as_index=False)['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'].sum()
        
        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
        processed_df['–°—Ç–∞—Ç—É—Å'] = processed_df['–ê—Ä—Ç–∏–∫—É–ª'].apply(check_meteor_article)
        
        return processed_df
        
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return pd.DataFrame()

def process_competitor_data(df, name_col, qty_col):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤"""
    try:
        # –ë–∞–∑–æ–≤–∞—è –æ—á–∏—Å—Ç–∫–∞
        processed_df = df[[name_col, qty_col]].copy()
        processed_df.columns = ['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ']
        
        # –£–¥–∞–ª–µ–Ω–∏–µ –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫
        processed_df = processed_df.dropna()
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤
        processed_df['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'] = pd.to_numeric(processed_df['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'], errors='coerce')
        processed_df = processed_df.dropna(subset=['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'])
        processed_df['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'] = processed_df['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'].astype(int)
        
        # –ü–∞—Ä—Å–∏–Ω–≥ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–π
        processed_df['–ü–∞—Ä–∞–º–µ—Ç—Ä—ã'] = processed_df['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ'].apply(parse_competitor_name)
        
        # –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å METEOR
        processed_df['–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ METEOR'] = processed_df['–ü–∞—Ä–∞–º–µ—Ç—Ä—ã'].apply(map_to_meteor)
        
        return processed_df
        
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return pd.DataFrame()

def parse_competitor_name(name):
    """–ü–∞—Ä—Å–∏–Ω–≥ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–π –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
    name_str = str(name).upper()
    
    patterns = [
        # VC 22-500-600, VK 30-600-1200
        r'(V[KC])\s*(\d+)[-\s](\d+)[-\s](\d+)',
        # –õ–ö 11-504, –õ–ö 11-504-900
        r'[–õL][–öK]\s*(\d+)[-\s](\d+)(?:[-\s](\d+))?',
        # —Ç–∏–ø 10-400-1000
        r'–¢–ò–ü\s*(\d+)[-\s](\d+)[-\s](\d+)',
        # 10-400-1000
        r'(\d+)[-\s](\d+)[-\s](\d+)'
    ]
    
    for pattern in patterns:
        match = re.search(pattern, name_str)
        if match:
            return extract_parameters(match, pattern)
    
    return None

def extract_parameters(match, pattern):
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–∑ regex match"""
    groups = match.groups()
    
    if 'V' in pattern:
        # VK/VC —Ñ–æ—Ä–º–∞—Ç: VK 30-600-1200
        return {
            'type': groups[1] if len(groups) >= 2 else None,
            'height': int(groups[2]) if len(groups) >= 3 and groups[2] else None,
            'length': int(groups[3]) if len(groups) >= 4 and groups[3] else None,
            'connection': 'VK-–ø—Ä–∞–≤–æ–µ' if groups[0] == 'VK' else 'VK-–ª–µ–≤–æ–µ'
        }
    else:
        # –î—Ä—É–≥–∏–µ —Ñ–æ—Ä–º–∞—Ç—ã
        return {
            'type': groups[0] if groups[0] else None,
            'height': int(groups[1]) if len(groups) >= 2 and groups[1] else None,
            'length': int(groups[2]) if len(groups) >= 3 and groups[2] else None,
            'connection': 'K-–±–æ–∫–æ–≤–æ–µ'
        }

def map_to_meteor(parameters):
    """–°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å –∞—Ä—Ç–∏–∫—É–ª–∞–º–∏ METEOR"""
    if not parameters:
        return "–ù–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ"
    
    # –ü–æ–∏—Å–∫ –≤ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö METEOR
    sheets = st.session_state.sheets
    
    for sheet_name, df in sheets.items():
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –ª–∏—Å—Ç–∞
        if parameters.get('connection', '').replace('-', ' ') in sheet_name:
            # –ü–æ–∏—Å–∫ –ø–æ —Ä–∞–∑–º–µ—Ä–∞–º –≤ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è—Ö
            pattern = f"/{parameters['height']}–º–º/{parameters['length']}–º–º"
            matches = df[df['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ'].str.contains(pattern, na=False)]
            
            if not matches.empty:
                product = matches.iloc[0]
                return f"{product['–ê—Ä—Ç–∏–∫—É–ª']} - {product['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ']}"
    
    return "–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"

def check_meteor_article(article):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ä—Ç–∏–∫—É–ª–∞ METEOR –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    sheets = st.session_state.sheets
    
    for sheet_name, df in sheets.items():
        if article in df['–ê—Ä—Ç–∏–∫—É–ª'].astype(str).values:
            product = df[df['–ê—Ä—Ç–∏–∫—É–ª'].astype(str) == article].iloc[0]
            return f"‚úÖ –ù–∞–π–¥–µ–Ω: {product['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ']}"
    
    return "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ"

def display_processed_data(processed_df, data_type):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    st.subheader("üìã –û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
    
    if data_type == "METEOR":
        st.dataframe(processed_df, use_container_width=True)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_articles = len(processed_df)
        found_articles = len(processed_df[processed_df['–°—Ç–∞—Ç—É—Å'].str.startswith('‚úÖ')])
        
        col1, col2 = st.columns(2)
        with col1:
            st.metric("–í—Å–µ–≥–æ –∞—Ä—Ç–∏–∫—É–ª–æ–≤", total_articles)
        with col2:
            st.metric("–ù–∞–π–¥–µ–Ω–æ –≤ –±–∞–∑–µ", found_articles)
            
    else:  # Competitor
        st.dataframe(processed_df, use_container_width=True)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –¥–ª—è –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤
        total_products = len(processed_df)
        recognized_products = len(processed_df[processed_df['–ü–∞—Ä–∞–º–µ—Ç—Ä—ã'].notna()])
        mapped_products = len(processed_df[processed_df['–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ METEOR'] != "–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"])
        
        col1, col2, col3 = st.columns(3)
        with col1:
            st.metric("–í—Å–µ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤", total_products)
        with col2:
            st.metric("–†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ", recognized_products)
        with col3:
            st.metric("–°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–æ", mapped_products)
    
    # –ö–Ω–æ–ø–∫–∞ –∏–º–ø–æ—Ä—Ç–∞
    if st.button("‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É", type="primary", use_container_width=True):
        import_to_system(processed_df, data_type)
        st.success("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã!")

def import_to_system(processed_df, data_type):
    """–ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ —Å–∏—Å—Ç–µ–º—É"""
    if data_type == "METEOR":
        import_meteor_articles(processed_df)
    else:
        import_competitor_articles(processed_df)

def import_meteor_articles(df):
    """–ò–º–ø–æ—Ä—Ç –∞—Ä—Ç–∏–∫—É–ª–æ–≤ METEOR –≤ –º–∞—Ç—Ä–∏—Ü—É"""
    imported_count = 0
    
    for _, row in df.iterrows():
        if row['–°—Ç–∞—Ç—É—Å'].startswith('‚úÖ'):
            # –ü–æ–∏—Å–∫ –∞—Ä—Ç–∏–∫—É–ª–∞ –≤ –±–∞–∑–µ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
            article = row['–ê—Ä—Ç–∏–∫—É–ª']
            quantity = row['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ']
            
            # –ü–æ–∏—Å–∫ –≤ –∫–∞–∫–∏—Ö –ª–∏—Å—Ç–∞—Ö –µ—Å—Ç—å —ç—Ç–æ—Ç –∞—Ä—Ç–∏–∫—É–ª
            sheets = st.session_state.sheets
            for sheet_name, sheet_df in sheets.items():
                if article in sheet_df['–ê—Ä—Ç–∏–∫—É–ª'].astype(str).values:
                    product = sheet_df[sheet_df['–ê—Ä—Ç–∏–∫—É–ª'].astype(str) == article].iloc[0]
                    
                    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –º–∞—Ç—Ä–∏—Ü—É
                    key = (sheet_name, article)
                    current_value = st.session_state.entry_values.get(key, "")
                    
                    if current_value:
                        new_value = f"{current_value}+{quantity}"
                    else:
                        new_value = str(quantity)
                    
                    st.session_state.entry_values[key] = new_value
                    imported_count += 1
                    break
    
    st.info(f"üì• –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {imported_count} –ø–æ–∑–∏—Ü–∏–π –≤ –º–∞—Ç—Ä–∏—Ü—É")

def manual_column_selection(df):
    """–†—É—á–Ω–æ–π –≤—ã–±–æ—Ä —Å—Ç–æ–ª–±—Ü–æ–≤ –¥–ª—è METEOR"""
    st.subheader("üîß –†—É—á–Ω–æ–π –≤—ã–±–æ—Ä —Å—Ç–æ–ª–±—Ü–æ–≤")
    
    col1, col2 = st.columns(2)
    
    with col1:
        art_col_manual = st.selectbox("–°—Ç–æ–ª–±–µ—Ü —Å –∞—Ä—Ç–∏–∫—É–ª–∞–º–∏:", df.columns, key="art_manual")
    
    with col2:
        qty_col_manual = st.selectbox("–°—Ç–æ–ª–±–µ—Ü —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞–º–∏:", df.columns, key="qty_manual")
    
    if st.button("–ü—Ä–∏–º–µ–Ω–∏—Ç—å –≤—ã–±–æ—Ä", key="apply_manual"):
        processed_df = process_meteor_data(df, art_col_manual, qty_col_manual)
        if not processed_df.empty:
            display_processed_data(processed_df, "METEOR")

def manual_competitor_selection(df):
    """–†—É—á–Ω–æ–π –≤—ã–±–æ—Ä —Å—Ç–æ–ª–±—Ü–æ–≤ –¥–ª—è –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤"""
    st.subheader("üîß –†—É—á–Ω–æ–π –≤—ã–±–æ—Ä —Å—Ç–æ–ª–±—Ü–æ–≤")
    
    col1, col2 = st.columns(2)
    
    with col1:
        name_col_manual = st.selectbox("–°—Ç–æ–ª–±–µ—Ü —Å –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è–º–∏:", df.columns, key="name_manual")
    
    with col2:
        qty_col_manual = st.selectbox("–°—Ç–æ–ª–±–µ—Ü —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞–º–∏:", df.columns, key="qty_manual_comp")
    
    if st.button("–ü—Ä–∏–º–µ–Ω–∏—Ç—å –≤—ã–±–æ—Ä", key="apply_manual_comp"):
        processed_df = process_competitor_data(df, name_col_manual, qty_col_manual)
        if not processed_df.empty:
            display_processed_data(processed_df, "Competitor")

if __name__ == "__main__":
    main()