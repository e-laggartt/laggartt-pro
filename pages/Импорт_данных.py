# pages/03_üìä_–ò–º–ø–æ—Ä—Ç_–¥–∞–Ω–Ω—ã—Ö.py
import streamlit as st
import pandas as pd
import io

st.set_page_config(
    page_title="–ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö - RadiaTool Pro",
    page_icon="üìä", 
    layout="wide"
)

def main():
    st.title("üìä –ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö")
    st.markdown("---")
    
    # –í—ã–±–æ—Ä —Ç–∏–ø–∞ –∏–º–ø–æ—Ä—Ç–∞
    import_type = st.radio(
        "–¢–∏–ø –∏–º–ø–æ—Ä—Ç–∞:",
        ["METEOR —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è", "–î—Ä—É–≥–∏–µ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–∏"],
        horizontal=True
    )
    
    if import_type == "METEOR —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è":
        import_meteor_spec()
    else:
        import_other_manufacturers()

def import_meteor_spec():
    """–ò–º–ø–æ—Ä—Ç —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–π METEOR"""
    
    st.subheader("–ò–º–ø–æ—Ä—Ç –∏–∑ METEOR")
    
    uploaded_file = st.file_uploader(
        "–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏",
        type=['xlsx', 'xls', 'csv'],
        help="–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ñ–æ—Ä–º–∞—Ç—ã: Excel (.xlsx, .xls), CSV"
    )
    
    if uploaded_file is not None:
        try:
            # –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
            if uploaded_file.name.endswith('.csv'):
                df = pd.read_csv(uploaded_file, encoding='utf-8')
            else:
                df = pd.read_excel(uploaded_file)
            
            st.success(f"‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: {uploaded_file.name}")
            st.write("–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –¥–∞–Ω–Ω—ã—Ö:")
            st.dataframe(df.head(), use_container_width=True)
            
            # –ê–≤—Ç–æ—Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–æ–≤
            art_col, qty_col = detect_columns(df)
            
            if art_col and qty_col:
                st.info(f"üìä –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: –ê—Ä—Ç–∏–∫—É–ª - '{art_col}', –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ - '{qty_col}'")
                
                # –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
                processed_df = process_imported_data(df, art_col, qty_col)
                
                if not processed_df.empty:
                    st.subheader("–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
                    st.dataframe(processed_df, use_container_width=True)
                    
                    # –ò–º–ø–æ—Ä—Ç –≤ —Å–∏—Å—Ç–µ–º—É
                    if st.button("‚úÖ –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—é", type="primary"):
                        import_to_specification(processed_df)
                        st.success("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã!")
                        
            else:
                st.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å—Ç–æ–ª–±—Ü—ã")
                manual_column_selection(df)
                
        except Exception as e:
            st.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: {e}")

def detect_columns(df):
    """–ê–≤—Ç–æ—Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Å—Ç–æ–ª–±—Ü–æ–≤"""
    art_col, qty_col = None, None
    
    for col in df.columns:
        col_lower = str(col).lower()
        if any(keyword in col_lower for keyword in ['–∞—Ä—Ç–∏–∫—É–ª', 'art', '–∫–æ–¥', 'code']):
            art_col = col
        elif any(keyword in col_lower for keyword in ['–∫–æ–ª-–≤–æ', '–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ', 'qty', 'quantity']):
            qty_col = col
    
    return art_col, qty_col

def process_imported_data(df, art_col, qty_col):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
    try:
        # –ë–∞–∑–æ–≤–∞—è –æ—á–∏—Å—Ç–∫–∞
        processed_df = df[[art_col, qty_col]].copy()
        processed_df.columns = ['–ê—Ä—Ç–∏–∫—É–ª', '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ']
        
        # –£–¥–∞–ª–µ–Ω–∏–µ –ø—É—Å—Ç—ã—Ö —Å—Ç—Ä–æ–∫
        processed_df = processed_df.dropna()
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤
        processed_df['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'] = pd.to_numeric(processed_df['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'], errors='coerce')
        processed_df = processed_df.dropna(subset=['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'])
        
        # –°—É–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö –∞—Ä—Ç–∏–∫—É–ª–æ–≤
        processed_df = processed_df.groupby('–ê—Ä—Ç–∏–∫—É–ª', as_index=False)['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'].sum()
        
        return processed_df
        
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return pd.DataFrame()

def import_to_specification(processed_df):
    """–ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–µ–∫—É—â—É—é —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—é"""
    # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –∞—Ä—Ç–∏–∫—É–ª–æ–≤ –≤ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –º–∞—Ç—Ä–∏—Ü—ã
    st.info("üîÑ –§—É–Ω–∫—Ü–∏—è –∏–º–ø–æ—Ä—Ç–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...")

def manual_column_selection(df):
    """–†—É—á–Ω–æ–π –≤—ã–±–æ—Ä —Å—Ç–æ–ª–±—Ü–æ–≤"""
    st.subheader("–†—É—á–Ω–æ–π –≤—ã–±–æ—Ä —Å—Ç–æ–ª–±—Ü–æ–≤")
    
    col1, col2 = st.columns(2)
    
    with col1:
        art_col_manual = st.selectbox("–°—Ç–æ–ª–±–µ—Ü —Å –∞—Ä—Ç–∏–∫—É–ª–∞–º–∏:", df.columns)
    
    with col2:
        qty_col_manual = st.selectbox("–°—Ç–æ–ª–±–µ—Ü —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞–º–∏:", df.columns)
    
    if st.button("–ü—Ä–∏–º–µ–Ω–∏—Ç—å –≤—ã–±–æ—Ä"):
        processed_df = process_imported_data(df, art_col_manual, qty_col_manual)
        if not processed_df.empty:
            st.dataframe(processed_df, use_container_width=True)

def import_other_manufacturers():
    """–ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –¥—Ä—É–≥–∏—Ö –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π"""
    st.subheader("–ò–º–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –¥—Ä—É–≥–∏—Ö –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π")
    
    st.info("""
    **–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã:**
    - VC 22-500-600
    - –õ–ö 11-504  
    - —Ç–∏–ø 10-400-1000
    """)
    
    uploaded_file = st.file_uploader(
        "–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª —Å –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è–º–∏",
        type=['xlsx', 'xls', 'csv']
    )
    
    if uploaded_file:
        st.warning("‚ö†Ô∏è –§—É–Ω–∫—Ü–∏—è –≤ –∞–∫—Ç–∏–≤–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ")

if __name__ == "__main__":
    main()