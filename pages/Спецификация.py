# pages/02_üìã_–°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è.py
import streamlit as st
import pandas as pd
from utils.calculator import parse_quantity, calculate_wall_brackets

st.set_page_config(
    page_title="–°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è - RadiaTool Pro", 
    page_icon="üìã",
    layout="wide"
)

def main():
    st.title("üìã –°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è")
    st.markdown("---")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –¥–∞–Ω–Ω—ã—Ö
    if not st.session_state.get('entry_values'):
        st.warning("‚ùå –ú–∞—Ç—Ä–∏—Ü–∞ —Ä–∞–¥–∏–∞—Ç–æ—Ä–æ–≤ –ø—É—Å—Ç–∞. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ.")
        if st.button("‚û°Ô∏è –ü–µ—Ä–µ–π—Ç–∏ –∫ –º–∞—Ç—Ä–∏—Ü–µ"):
            st.switch_page("app.py")
        return
    
    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏
    spec_data = generate_specification()
    
    if spec_data.empty:
        st.warning("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏.")
        return
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏
    st.subheader("–¢–µ–∫—É—â–∞—è —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è")
    
    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–∞—è —Ç–∞–±–ª–∏—Ü–∞
    edited_df = st.data_editor(
        spec_data,
        use_container_width=True,
        hide_index=True,
        column_config={
            "–ê—Ä—Ç–∏–∫—É–ª": st.column_config.TextColumn(width="medium"),
            "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ": st.column_config.TextColumn(width="large"),
            "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ": st.column_config.NumberColumn(width="small"),
            "–¶–µ–Ω–∞": st.column_config.NumberColumn(format="%.2f ‚ÇΩ"),
            "–°—É–º–º–∞": st.column_config.NumberColumn(format="%.2f ‚ÇΩ")
        }
    )
    
    # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    col1, col2, col3 = st.columns(3)
    
    with col1:
        if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—é", use_container_width=True):
            st.session_state.spec_data = edited_df
            st.rerun()
    
    with col2:
        if st.button("üì• –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel", use_container_width=True):
            export_to_excel(edited_df)
    
    with col3:
        if st.button("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—é", type="secondary", use_container_width=True):
            st.session_state.spec_data = pd.DataFrame()
            st.session_state.entry_values = {}
            st.rerun()
    
    # –ò—Ç–æ–≥–∏
    st.markdown("---")
    show_totals(edited_df)

def generate_specification():
    """–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ–π –º–∞—Ç—Ä–∏—Ü—ã"""
    
    # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–∑–∞–≥–ª—É—à–∫–∞)
    spec_rows = []
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —è—á–µ–µ–∫ –º–∞—Ç—Ä–∏—Ü—ã
    for key, value in st.session_state.entry_values.items():
        if value and parse_quantity(value) > 0:
            height, length = key.split('_')
            qty = parse_quantity(value)
            
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞—Ä—Ç–∏–∫—É–ª–∞ –∏ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è (–∑–∞–≥–ª—É—à–∫–∞)
            art = f"VK-{st.session_state.radiator_type}-{height}-{length}"
            name = f"–†–∞–¥–∏–∞—Ç–æ—Ä {st.session_state.connection} —Ç–∏–ø {st.session_state.radiator_type} {height}x{length}"
            price = 15000  # –ó–∞–≥–ª—É—à–∫–∞
            
            spec_rows.append({
                "–ê—Ä—Ç–∏–∫—É–ª": art,
                "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ": name,
                "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ": qty,
                "–¶–µ–Ω–∞": price,
                "–°—É–º–º–∞": qty * price
            })
    
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫—Ä–æ–Ω—à—Ç–µ–π–Ω–æ–≤
    if st.session_state.bracket_type != "–ë–µ–∑":
        bracket_rows = generate_brackets_spec()
        spec_rows.extend(bracket_rows)
    
    return pd.DataFrame(spec_rows)

def generate_brackets_spec():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∫—Ä–æ–Ω—à—Ç–µ–π–Ω–æ–≤"""
    bracket_rows = []
    
    # –†–∞—Å—á–µ—Ç –∫—Ä–æ–Ω—à—Ç–µ–π–Ω–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–∞–¥–∏–∞—Ç–æ—Ä–∞
    for key, value in st.session_state.entry_values.items():
        if value and parse_quantity(value) > 0:
            height, length = map(int, key.split('_'))
            qty = parse_quantity(value)
            
            if st.session_state.bracket_type == "–ù–∞—Å—Ç–µ–Ω–Ω—ã–µ":
                brackets = calculate_wall_brackets(
                    st.session_state.radiator_type,
                    length, height, qty
                )
                
                for art, br_qty in brackets:
                    price = 500  # –ó–∞–≥–ª—É—à–∫–∞
                    bracket_rows.append({
                        "–ê—Ä—Ç–∏–∫—É–ª": art,
                        "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ": f"–ö—Ä–æ–Ω—à—Ç–µ–π–Ω –Ω–∞—Å—Ç–µ–Ω–Ω—ã–π {art}",
                        "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ": br_qty,
                        "–¶–µ–Ω–∞": price,
                        "–°—É–º–º–∞": br_qty * price
                    })
    
    return bracket_rows

def show_totals(df):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤"""
    if df.empty:
        return
    
    total_qty = df['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'].sum()
    total_sum = df['–°—É–º–º–∞'].sum()
    
    # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å–∫–∏–¥–æ–∫
    discounts = st.session_state.discounts
    rad_sum = df[~df['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ'].str.contains('–ö—Ä–æ–Ω—à—Ç–µ–π–Ω', na=False)]['–°—É–º–º–∞'].sum()
    br_sum = df[df['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ'].str.contains('–ö—Ä–æ–Ω—à—Ç–µ–π–Ω', na=False)]['–°—É–º–º–∞'].sum()
    
    rad_discounted = rad_sum * (1 - discounts['radiators'] / 100)
    br_discounted = br_sum * (1 - discounts['brackets'] / 100)
    total_discounted = rad_discounted + br_discounted
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric("–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ", f"{total_qty:.0f} —à—Ç")
    
    with col2:
        st.metric("–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å", f"{total_sum:,.2f} ‚ÇΩ")
    
    with col3:
        st.metric("–°–∫–∏–¥–∫–∞ —Ä–∞–¥–∏–∞—Ç–æ—Ä—ã", f"-{discounts['radiators']}%")
    
    with col4:
        st.metric("–ò—Ç–æ–≥–æ —Å–æ —Å–∫–∏–¥–∫–æ–π", f"{total_discounted:,.2f} ‚ÇΩ")

def export_to_excel(df):
    """–≠–∫—Å–ø–æ—Ä—Ç –≤ Excel"""
    try:
        from io import BytesIO
        import openpyxl
        
        output = BytesIO()
        
        with pd.ExcelWriter(output, engine='openpyxl') as writer:
            df.to_excel(writer, sheet_name='–°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è', index=False)
            
            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            workbook = writer.book
            worksheet = writer.sheets['–°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è']
            
            # –ê–≤—Ç–æ–ø–æ–¥–±–æ—Ä —à–∏—Ä–∏–Ω—ã —Å—Ç–æ–ª–±—Ü–æ–≤
            for column in worksheet.columns:
                max_length = 0
                column_letter = column[0].column_letter
                for cell in column:
                    try:
                        if len(str(cell.value)) > max_length:
                            max_length = len(str(cell.value))
                    except:
                        pass
                adjusted_width = (max_length + 2)
                worksheet.column_dimensions[column_letter].width = adjusted_width
        
        st.success("‚úÖ –§–∞–π–ª –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è")
        st.download_button(
            label="üì• –°–∫–∞—á–∞—Ç—å Excel —Ñ–∞–π–ª",
            data=output.getvalue(),
            file_name=f"—Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è_{pd.Timestamp.now().strftime('%Y%m%d_%H%M')}.xlsx",
            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
        )
        
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞: {e}")

if __name__ == "__main__":
    main()