# pages/02_üìã_–°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è.py
import streamlit as st
import pandas as pd
from utils.session_manager import get_specification_data
from utils.exporter import export_to_excel, export_to_csv

st.set_page_config(
    page_title="–°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è - RadiaTool Pro", 
    page_icon="üìã",
    layout="wide"
)

def main():
    st.title("üìã –°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è")
    st.markdown("---")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –¥–∞–Ω–Ω—ã—Ö
    if not st.session_state.get('entry_values'):
        st.warning("‚ùå –ú–∞—Ç—Ä–∏—Ü–∞ —Ä–∞–¥–∏–∞—Ç–æ—Ä–æ–≤ –ø—É—Å—Ç–∞. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞ –≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ.")
        if st.button("‚û°Ô∏è –ü–µ—Ä–µ–π—Ç–∏ –∫ –º–∞—Ç—Ä–∏—Ü–µ"):
            st.switch_page("pages/–ì–ª–∞–≤–Ω–∞—è.py")
        return
    
    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏
    spec_data = get_specification_data()
    
    if spec_data.empty:
        st.warning("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏.")
        return
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏
    st.subheader("–¢–µ–∫—É—â–∞—è —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è")
    
    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º–∞—è —Ç–∞–±–ª–∏—Ü–∞
    edited_df = st.data_editor(
        spec_data,
        use_container_width=True,
        hide_index=True,
        column_config={
            "–ê—Ä—Ç–∏–∫—É–ª": st.column_config.TextColumn(width="medium"),
            "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ": st.column_config.TextColumn(width="large"),
            "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ": st.column_config.NumberColumn(width="small", min_value=0),
            "–¶–µ–Ω–∞": st.column_config.NumberColumn(format="%.2f ‚ÇΩ"),
            "–°—É–º–º–∞": st.column_config.NumberColumn(format="%.2f ‚ÇΩ"),
            "–¢–∏–ø": st.column_config.SelectboxColumn(
                options=["–†–∞–¥–∏–∞—Ç–æ—Ä", "–ö—Ä–æ–Ω—à—Ç–µ–π–Ω"],
                width="small"
            )
        },
        disabled=["–ê—Ä—Ç–∏–∫—É–ª", "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ", "–ú–æ—â–Ω–æ—Å—Ç—å, –í—Ç", "–í–µ—Å, –∫–≥", "–û–±—ä–µ–º, –º3"]
    )
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    if not edited_df.equals(spec_data):
        st.session_state.spec_data = edited_df
        st.success("‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
    
    # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    st.markdown("---")
    st.subheader("üöÄ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–µ–π")
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        if st.button("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", use_container_width=True):
            st.session_state.spec_data = get_specification_data()
            st.rerun()
    
    with col2:
        if st.button("üì• Excel", use_container_width=True):
            export_specification_to_excel(edited_df)
    
    with col3:
        if st.button("üìÑ CSV", use_container_width=True):
            export_specification_to_csv(edited_df)
    
    with col4:
        if st.button("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å", type="secondary", use_container_width=True):
            st.session_state.entry_values = {}
            st.session_state.spec_data = pd.DataFrame()
            st.rerun()
    
    # –ò—Ç–æ–≥–∏
    st.markdown("---")
    show_totals(edited_df)
    
    # –ë—ã—Å—Ç—Ä–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ
    st.markdown("---")
    show_quick_copy(edited_df)

def show_totals(df):
    """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤ —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó"""
    if df.empty:
        return
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –∏—Ç–æ–≥–∏
    total_qty = df['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'].sum()
    total_sum = df['–°—É–º–º–∞'].sum()
    
    # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ —Ä–∞–¥–∏–∞—Ç–æ—Ä—ã –∏ –∫—Ä–æ–Ω—à—Ç–µ–π–Ω—ã
    rad_df = df[df['–¢–∏–ø'] == '–†–∞–¥–∏–∞—Ç–æ—Ä']
    br_df = df[df['–¢–∏–ø'] == '–ö—Ä–æ–Ω—à—Ç–µ–π–Ω']
    
    rad_qty = rad_df['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'].sum()
    rad_sum = rad_df['–°—É–º–º–∞'].sum()
    br_qty = br_df['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'].sum() 
    br_sum = br_df['–°—É–º–º–∞'].sum()
    
    # –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Å–∫–∏–¥–æ–∫
    discounts = st.session_state.discounts
    rad_discounted = rad_sum * (1 - discounts['radiators'] / 100)
    br_discounted = br_sum * (1 - discounts['brackets'] / 100)
    total_discounted = rad_discounted + br_discounted
    
    # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    total_power = (rad_df['–ú–æ—â–Ω–æ—Å—Ç—å, –í—Ç'] * rad_df['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ']).sum()
    total_weight = (df['–í–µ—Å, –∫–≥'] * df['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ']).sum()
    total_volume = (df['–û–±—ä–µ–º, –º3'] * df['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ']).sum()
    
    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤
    st.subheader("üìä –ò—Ç–æ–≥–∏")
    
    # –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –∏—Ç–æ–≥–∏
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric("–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ", f"{total_qty:.0f} —à—Ç")
        st.metric("–†–∞–¥–∏–∞—Ç–æ—Ä—ã", f"{rad_qty:.0f} —à—Ç")
        st.metric("–ö—Ä–æ–Ω—à—Ç–µ–π–Ω—ã", f"{br_qty:.0f} —à—Ç")
    
    with col2:
        st.metric("–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å", f"{total_sum:,.2f} ‚ÇΩ")
        st.metric("–°—Ç–æ–∏–º–æ—Å—Ç—å —Ä–∞–¥–∏–∞—Ç–æ—Ä–æ–≤", f"{rad_sum:,.2f} ‚ÇΩ")
        st.metric("–°—Ç–æ–∏–º–æ—Å—Ç—å –∫—Ä–æ–Ω—à—Ç–µ–π–Ω–æ–≤", f"{br_sum:,.2f} ‚ÇΩ")
    
    with col3:
        st.metric("–°–∫–∏–¥–∫–∞ —Ä–∞–¥–∏–∞—Ç–æ—Ä—ã", f"-{discounts['radiators']}%")
        st.metric("–°–∫–∏–¥–∫–∞ –∫—Ä–æ–Ω—à—Ç–µ–π–Ω—ã", f"-{discounts['brackets']}%")
        st.metric("–ò—Ç–æ–≥–æ —Å–æ —Å–∫–∏–¥–∫–æ–π", f"{total_discounted:,.2f} ‚ÇΩ")
    
    with col4:
        # –ê–≤—Ç–æ—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        power_text = format_power(total_power)
        weight_text = format_weight(total_weight)
        volume_text = format_volume(total_volume)
        
        st.metric("–°—É–º–º–∞—Ä–Ω–∞—è –º–æ—â–Ω–æ—Å—Ç—å", power_text)
        st.metric("–û–±—â–∏–π –≤–µ—Å", weight_text)
        st.metric("–û–±—â–∏–π –æ–±—ä–µ–º", volume_text)

def format_power(watts):
    """–ê–≤—Ç–æ—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ—â–Ω–æ—Å—Ç–∏ —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó"""
    if watts >= 1000000:
        return f"{watts/1000000:.2f} –ú–í—Ç"
    elif watts >= 1000:
        return f"{watts/1000:.2f} –∫–í—Ç"
    else:
        return f"{watts:.0f} –í—Ç"

def format_weight(kg):
    """–ê–≤—Ç–æ—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–µ—Å–∞ —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó"""
    if kg >= 1000:
        return f"{kg/1000:.2f} —Ç"
    else:
        return f"{kg:.1f} –∫–≥"

def format_volume(m3):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—ä–µ–º–∞"""
    return f"{m3:.3f} –º¬≥"

def show_quick_copy(df):
    """–ë—ã—Å—Ç—Ä–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –±—É—Ñ–µ—Ä —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó"""
    st.subheader("üìã –ë—ã—Å—Ç—Ä–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ")
    
    col1, col2 = st.columns(2)
    
    with col1:
        if st.button("üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∞—Ä—Ç–∏–∫—É–ª—ã", use_container_width=True):
            articles = "\n".join(df['–ê—Ä—Ç–∏–∫—É–ª'].astype(str))
            st.session_state.copied_articles = articles
            st.success("‚úÖ –ê—Ä—Ç–∏–∫—É–ª—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã –≤ –±—É—Ñ–µ—Ä!")
    
    with col2:
        if st.button("üìã –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞", use_container_width=True):
            quantities = "\n".join(df['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'].astype(str))
            st.session_state.copied_quantities = quantities
            st.success("‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã –≤ –±—É—Ñ–µ—Ä!")
    
    # –ü–æ–∫–∞–∑–∞—Ç—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    if 'copied_articles' in st.session_state:
        with st.expander("üìã –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∞—Ä—Ç–∏–∫—É–ª—ã"):
            st.text_area("–ê—Ä—Ç–∏–∫—É–ª—ã", st.session_state.copied_articles, height=150, key="articles_area")
    
    if 'copied_quantities' in st.session_state:
        with st.expander("üìã –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞"):
            st.text_area("–ö–æ–ª–∏—á–µ—Å—Ç–≤–∞", st.session_state.copied_quantities, height=150, key="quantities_area")

def export_specification_to_excel(df):
    """–≠–∫—Å–ø–æ—Ä—Ç —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤ Excel"""
    try:
        from utils.exporter import export_to_excel
        
        file_data, filename = export_to_excel(df)
        
        if file_data:
            st.success("‚úÖ –§–∞–π–ª –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è")
            st.download_button(
                label="üì• –°–∫–∞—á–∞—Ç—å Excel —Ñ–∞–π–ª",
                data=file_data,
                file_name=filename,
                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
                key="excel_download"
            )
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ Excel: {e}")

def export_specification_to_csv(df):
    """–≠–∫—Å–ø–æ—Ä—Ç —Å–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤ CSV"""
    try:
        from utils.exporter import export_to_csv
        
        file_data, filename = export_to_csv(df)
        
        if file_data:
            st.success("‚úÖ CSV —Ñ–∞–π–ª –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è")
            st.download_button(
                label="üì• –°–∫–∞—á–∞—Ç—å CSV —Ñ–∞–π–ª",
                data=file_data,
                file_name=filename,
                mime="text/csv",
                key="csv_download"
            )
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –≤ CSV: {e}")

if __name__ == "__main__":
    main()